{"version":3,"sources":["utils/api.js","utils/apiAuth.js","store/reducers/popupReducer.js","store/reducers/authReducer.js","store/reducers/userReducer.js","store/reducers/galleryReducer.js","store/reducers/cardReducer.js","store/reducers/loadingReducer.js","images/logo.svg","components/Header.js","components/Profile.js","components/Card.js","components/Gallery.js","components/Main.js","components/Footer.js","hooks/validationHook.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/ImagePopup.js","components/AddPlacePopup.js","components/DeletePlacePopup.js","components/Register.js","components/Login.js","components/ProtectedRoute.js","components/InfoTooltip.js","components/App.js","reportWebVitals.js","store/store.js","index.js"],"names":["BASE_URL","headers","authorization","checkResponse","response","ok","json","Promise","reject","statusText","popupState","editProfilePopupState","editAvatarPopupState","addPlacePopupState","deletePlacePopupState","imagePopupState","infoTooltipState","OPEN","CLOSE","authState","isRegistered","isLoggedIn","userEmail","LOG_IN","LOG_OUT","REGISTERED","UNREGISTERED","userState","name","about","avatar","cohort","_id","GET_USER","UPDATE_PROFILE","UPDATE_AVATAR","galleryState","GET_CARDS","ADD_CARD","LIKE_CARD","DELETE_CARD","cardState","OPENED_CARD","DELETED_CARD","loadingState","isLoading","LOADING","LOADED","loadingDataAction","type","loadedDataAction","Header","onLogout","currentLocation","useLocation","pathname","useSelector","state","auth","className","src","logoPath","alt","to","onClick","Profile","onOpenPopup","user","Card","link","likes","owner","onCardClick","onCardLike","onCardDelete","currentUser","isOwn","isLiked","some","length","Gallery","onImageCard","cards","map","Main","Footer","useFormAndValidation","useState","values","setValues","errors","setErrors","isValid","setIsValid","resetForm","useCallback","newValues","newErrors","newIsValid","handleChange","e","target","value","validationMessage","closest","checkValidity","PopupWithForm","title","submitButtonText","isOpen","onClose","onSubmit","children","popupClassName","onMouseDown","action","method","EditProfilePopup","onUpdateUser","popup","loading","useEffect","description","evt","preventDefault","placeholder","onChange","required","minLength","maxLength","id","EditAvatarPopup","onUpdateAvatar","React","ImagePopup","card","AddPlacePopup","onAddPlace","DeletePlacePopup","onApproveDeletePlace","Register","onRegister","email","password","registerInputValues","setRegisterInputValues","handleInputChange","Login","onLogin","loginInputValues","setLoginInputValues","ProtectedRoute","Component","component","props","exact","path","InfoTooltip","signClassName","App","dispatch","useDispatch","history","useHistory","popupType","payload","openPopupAction","document","addEventListener","handleEscClick","onClosePopup","currentTarget","removeEventListener","key","checkUserToken","token","localStorage","getItem","fetch","Authorization","then","apiAuth","data","push","catch","handleError","error","console","log","cardsData","err","removeItem","body","JSON","stringify","setItem","Accept","cardId","likeStatus","api","newCard","inputValuesData","finally","cardData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","filter","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.020a8cfe.chunk.js","sourcesContent":["export const BASE_URL = \"https://mesto.nomoreparties.co/v1/cohort-27\";\nexport const headers = {\n  authorization: \"8db06075-d4ea-471e-8c36-db2b91e349e8\",\n  \"Content-Type\": \"application/json\",\n};\n\nconst checkResponse = (response) => {\n  if (response.ok) {\n    return response.json();\n  }\n  return Promise.reject(`Ошибка: ${response.statusText}`);\n};\n\n//GET запрос на текущие карточки с сервера\nexport const getCards = () => {\n  return fetch(`${BASE_URL}/cards`, {\n    headers: headers,\n  }).then(checkResponse);\n};\n\n//GET запрос на данные пользователя\nexport const getUserData = () => {\n  return fetch(`${BASE_URL}/users/me`, {\n    headers: headers,\n  }).then(checkResponse);\n};\n\n//PATCH запрос на обновление данных пользователя\nexport const updateUserData = (inputValuesData) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"PATCH\",\n    headers: headers,\n    body: JSON.stringify({\n      name: inputValuesData.name,\n      about: inputValuesData.about,\n    }),\n  }).then(checkResponse);\n};\n\n//POST запрос на добавление новой карточки\nexport const addCard = (cardData) => {\n  return fetch(`${BASE_URL}/cards`, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify({\n      name: cardData.name,\n      link: cardData.link,\n    }),\n  }).then(checkResponse);\n};\n\n//DELETE запрос на удаление карточки\nexport const deleteCard = (cardId) => {\n  return fetch(`${BASE_URL}/cards/${cardId}`, {\n    method: \"DELETE\",\n    headers: headers,\n  }).then(checkResponse);\n};\n\n//PUT и DELETE запрос на добавление/удаление лайка карточке\nexport const changeLikeCardStatus = (cardId, likeStatus) => {\n  return fetch(`${BASE_URL}/cards/likes/${cardId}`, {\n    method: likeStatus ? \"DELETE\" : \"PUT\",\n    headers: headers,\n  }).then(checkResponse);\n};\n\n//PATCH запрос на обновление аватара пользователя\nexport const updateAvatar = ({ avatar }) => {\n  return fetch(`${BASE_URL}/users/me/avatar`, {\n    method: \"PATCH\",\n    headers: headers,\n    body: JSON.stringify({\n      avatar: avatar,\n    }),\n  }).then(checkResponse);\n};\n","export const BASE_URL = \"https://auth.nomoreparties.co\";\r\n\r\nconst checkResponse = (response) => {\r\n  if (response.ok) {\r\n    return response.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${response.statusText}`);\r\n};\r\n\r\nexport const register = (password, email) => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const authorize = (password, email) => {\r\n  return fetch(`${BASE_URL}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const isTokenValid = (token) => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  }).then(checkResponse);\r\n};\r\n","/**\n * Дефолтное состояние для popupReducer.\n */\nconst popupState = {\n  editProfilePopupState: false,\n  editAvatarPopupState: false,\n  addPlacePopupState: false,\n  deletePlacePopupState: false,\n  imagePopupState: false,\n  infoTooltipState: false,\n};\nconst OPEN = \"OPEN\";\nconst CLOSE = \"CLOSE\";\n\n/**\n * Функция-редьюсер для состояний попапов.\n *\n * @param state - дефолтное состояние всех попапов (true - попап открыт, false - попап закрыт).\n * @param action - action, отправленный в popupReducer.\n */\nexport const popupReducer = (state = popupState, action) => {\n  switch (action.type) {\n    case OPEN:\n      return { ...state, [`${action.payload}State`]: true };\n    case CLOSE:\n      return {\n        popupState,\n      };\n    default:\n      return state;\n  }\n};\n\n/**\n * Экспорт actions данного редьюсера для dispatch в App.js\n */\nexport const openPopupAction = ({ payload }) => ({\n  type: OPEN,\n  payload: payload,\n});\nexport const closePopupAction = () => ({ type: CLOSE });\n","/**\n * Дефолтное состояние для authReducer.\n */\nconst authState = {\n  isRegistered: false,\n  isLoggedIn: false,\n  userEmail: \"\",\n};\nconst LOG_IN = \"LOG_IN\";\nconst LOG_OUT = \"LOG_OUT\";\nconst REGISTERED = \"registered\";\nconst UNREGISTERED = \"unregistered\";\n\n/**\n * Редьюсер для авторизации пользователя\n *\n * @param state - дефолтное состояние параметров isRegistered, isLoggedIn, userEmail.\n * @param action - action, отправленный в authReducer.\n */\nexport const authReducer = (state = authState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      return {\n        ...state,\n        isLoggedIn: true,\n        userEmail: action.payload,\n      };\n    case LOG_OUT:\n      return { ...state, isLoggedIn: false, userEmail: \"\" };\n    case REGISTERED:\n      return { ...state, isLoggedIn: false, isRegistered: true };\n    case UNREGISTERED:\n      return { ...state, isLoggedIn: false, isRegistered: false };\n    default:\n      return state;\n  }\n};\n\n/**\n * Экспорт actions данного редьюсера для dispatch в App.js\n */\nexport const loginAction = (payload) => ({ type: LOG_IN, payload: payload });\nexport const logoutAction = () => ({ type: LOG_OUT });\nexport const registerAction = () => ({ type: REGISTERED });\nexport const unregisterAction = () => ({ type: UNREGISTERED });\n","const userState = {\n  name: \"\",\n  about: \"\",\n  avatar: \"\",\n  cohort: \"\",\n  _id: \"\",\n};\nconst GET_USER = \"GET_USER\";\nconst UPDATE_PROFILE = \"UPDATE_PROFILE\";\nconst UPDATE_AVATAR = \"UPDATE_AVATAR\";\n\nexport const userReducer = (state = userState, action) => {\n  switch (action.type) {\n    case GET_USER: {\n      return {\n        ...state,\n        name: action.payload.name,\n        about: action.payload.about,\n        avatar: action.payload.avatar,\n        cohort: action.payload.cohort,\n        _id: action.payload._id,\n      };\n    }\n    case UPDATE_PROFILE:\n      return {\n        ...state,\n        name: action.payload.name,\n        about: action.payload.about,\n      };\n    case UPDATE_AVATAR:\n      return {\n        ...state,\n        avatar: action.payload.avatar,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const getUserAction = (payload) => ({\n  type: GET_USER,\n  payload: payload,\n});\n\nexport const updateProfileAction = (payload) => ({\n  type: UPDATE_PROFILE,\n  payload: payload,\n});\n\nexport const updateAvatarAction = (payload) => ({\n  type: UPDATE_AVATAR,\n  payload: payload,\n});\n","/**\n * Дефолтное состояние для galleryReducer.\n */\nconst galleryState = [];\nconst GET_CARDS = \"GET_CARDS\";\nconst ADD_CARD = \"ADD_CARD\";\nconst LIKE_CARD = \"LIKE_CARD\";\nconst DELETE_CARD = \"DELETE_CARD\";\n\n/**\n * Редьюсер для взаимодействия с галереей: загрузка всех карточек, добавление новой карточки,\n * лайк карточки, удаление карточки.\n *\n * @param state - дефолтное состояние параметров galleryState.\n * @param action - action, отправленный в galleryReducer.\n */\nexport const galleryReducer = (state = galleryState, action) => {\n  switch (action.type) {\n    case GET_CARDS:\n      return [...galleryState, ...action.payload];\n    case ADD_CARD:\n      return [action.payload, ...state];\n    case LIKE_CARD:\n      return [\n        ...state.map((card) =>\n          card._id === action.payload.cardId ? action.payload.newCard : card\n        ),\n      ];\n\n    case DELETE_CARD:\n      return [...state.filter((card) => card._id !== action.payload)];\n    default:\n      return state;\n  }\n};\n\n/**\n * Экспорт actions данного редьюсера для dispatch в App.js\n */\nexport const getCardsAction = (payload) => ({\n  type: GET_CARDS,\n  payload: payload,\n});\n\nexport const addCardAction = (payload) => ({\n  type: ADD_CARD,\n  payload: payload,\n});\n\nexport const likeCardAction = (payload) => ({\n  type: LIKE_CARD,\n  payload: payload,\n});\n\nexport const deleteCardAction = (payload) => ({\n  type: DELETE_CARD,\n  payload: payload,\n});\n","/**\n * Дефолтное состояние для cardReducer.\n */\nconst cardState = {};\nconst OPENED_CARD = \"SELECTED_CARD\";\nconst DELETED_CARD = \"DELETED_CARD\";\n\n/**\n * Редьюсер для получения данных карточки для открытие полного изображения или удаление карточки.\n *\n * @param state - дефолтное состояние параметров cardState.\n * @param action - action, отправленный в cardReducer.\n */\nexport const cardReducer = (state = cardState, action) => {\n  switch (action.type) {\n    case OPENED_CARD:\n      return { ...cardState, ...action.payload };\n    case DELETED_CARD:\n      return { ...cardState, _id: action.payload };\n    default:\n      return state;\n  }\n};\n\n/**\n * Экспорт actions данного редьюсера для dispatch в App.js\n */\nexport const openedCardAction = (payload) => ({\n  type: OPENED_CARD,\n  payload: payload,\n});\nexport const deletedCardAction = (payload) => ({\n  type: DELETED_CARD,\n  payload: payload,\n});\n","/**\n * Дефолтное состояние для loadingReducer.\n */\nconst loadingState = {\n  isLoading: false,\n};\nconst LOADING = \"LOADING\";\nconst LOADED = \"LOADED\";\n\n/**\n * Редьюсер для статуса загрузки данных на сервер.\n *\n * @param state - дефолтное состояние параметров loadingState.\n * @param action - action, отправленный в loadingReducer.\n */\nexport const loadingReducer = (state = loadingState, action) => {\n  switch (action.type) {\n    case LOADING:\n      return { ...state, isLoading: true };\n    case LOADED:\n      return { ...state, isLoading: false };\n    default:\n      return state;\n  }\n};\n\n/**\n * Экспорт actions данного редьюсера для dispatch в App.js\n */\nexport const loadingDataAction = () => ({ type: LOADING });\nexport const loadedDataAction = () => ({ type: LOADED });\n","export default __webpack_public_path__ + \"static/media/logo.bbe2a6ea.svg\";","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport logoPath from \"../images/logo.svg\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * Header - компонент хэдера.\n *\n * @prop onLogout - обработчик клика на кнопку Выйти.\n */\nexport default function Header({ onLogout }) {\n  /**\n   * Хук для определения текущего URL.\n   */\n  const location = useLocation();\n\n  /**\n   * Параметр с текущим URL.\n   */\n  const currentLocation = location.pathname;\n\n  /**\n   * Параметры статуса логина пользователя и его email.\n   */\n  const { isLoggedIn, userEmail } = useSelector((state) => state.auth);\n\n  return (\n    <header className=\"header page__header\">\n      <img src={logoPath} alt=\"Лого Mesto Russia\" className=\"header__logo\" />\n      <div className=\"header__navigation\">\n        {isLoggedIn && currentLocation === \"/\" && (\n          <>\n            <p className=\"header__user-email\">{userEmail}</p>\n            <Link\n              to=\"sign-up\"\n              className=\"header__link header__link_type_logout\"\n              onClick={onLogout}\n            >\n              Выйти\n            </Link>\n          </>\n        )}\n        {!isLoggedIn && currentLocation === \"/sign-up\" && (\n          <Link to=\"sign-in\" className=\"header__link\">\n            Войти\n          </Link>\n        )}\n        {!isLoggedIn && currentLocation === \"/sign-in\" && (\n          <Link to=\"sign-up\" className=\"header__link\">\n            Регистрация\n          </Link>\n        )}\n      </div>\n    </header>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * Profile - компонент профиля.\n *\n * @prop onOpenPopup - обработчик клика на кнопки открытия попапов.\n */\nexport default function Profile({ onOpenPopup }) {\n  /**\n   * Параметры текущего пользователя.\n   */\n  const { avatar, name, about } = useSelector((state) => state.user);\n\n  /**\n   * Обработчик клика на кнопку открытия попапа редактирования профиля.\n   */\n  const openEditProfilePopup = () => {\n    onOpenPopup(\"editProfilePopup\");\n  };\n\n  /**\n   * Обработчик клика на кнопку открытия попапа изменения аватара.\n   */\n  const openEditAvatarPopup = () => {\n    onOpenPopup(\"editAvatarPopup\");\n  };\n\n  /**\n   * Обработчик клика на кнопку открытия попапа добавления карточки.\n   */\n  const openAddPlacePopup = () => {\n    onOpenPopup(\"addPlacePopup\");\n  };\n\n  return (\n    <section className=\"profile content__profile\">\n      <div className=\"profile__avatar-container\" onClick={openEditAvatarPopup}>\n        <img src={avatar} alt=\"Аватар профиля\" className=\"profile__avatar\" />\n      </div>\n      <div className=\"profile__info\">\n        <h1 className=\"profile__name\">{name}</h1>\n        <button\n          className=\"button button_type_edit-profile\"\n          onClick={openEditProfilePopup}\n          type=\"button\"\n          aria-label=\"Редактировать профиль\"\n        ></button>\n        <p className=\"profile__about\">{about}</p>\n      </div>\n      <button\n        className=\"button button_type_add-place\"\n        onClick={openAddPlacePopup}\n        type=\"button\"\n        aria-label=\"Добавить место\"\n      ></button>\n    </section>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * Card - компонент карточки в галерее.\n *\n * @prop name - пропс с названием карточки.\n * @prop link - пропс с ссылкой на изображение карточки.\n * @prop likes - пропс с массивом пользователей, лайкнувших карточку.\n * @prop owner - пропс с массивом данных пользователя, загрузившего карточку.\n * @prop _id - пропс с id карточки.\n * @prop onCardClick - пропс с функцией обработки клика на изображение карточки.\n * @prop onCardLike - пропс с функцией обработки клика на кнопку лайка карточки.\n * @prop onCardDelete - пропс с функцией обработчки клика на кнопку удаления карточки.\n */\nexport default function Card({\n  name,\n  link,\n  likes,\n  owner,\n  _id,\n  onCardClick,\n  onCardLike,\n  onCardDelete,\n}) {\n  const currentUser = useSelector((state) => state.user);\n  const isOwn = owner._id === currentUser._id;\n  const isLiked = likes.some((user) => user._id === currentUser._id);\n\n  const handleClick = () => {\n    onCardClick({ name: name, link: link });\n  };\n\n  const handleLikeClick = () => {\n    onCardLike(likes, _id);\n  };\n\n  const handleDeleteClick = () => {\n    onCardDelete(_id);\n  };\n\n  return (\n    <li className=\"gallery-table__item\">\n      {isOwn && (\n        <button\n          className={\"button card__delete-button\"}\n          onClick={handleDeleteClick}\n        ></button>\n      )}\n      <article className=\"card\">\n        <div className=\"card__image-container\" onClick={handleClick}>\n          <img src={link} alt={name} className=\"card__image\" />\n        </div>\n        <div className=\"card__info\">\n          <h2 className=\"card__title\">{name}</h2>\n          <div className=\"card__like-area\">\n            <button\n              className={`button card__like-button ${\n                isLiked && \"card__like-button_active\"\n              }`}\n              onClick={handleLikeClick}\n              type=\"button\"\n              aria-label=\"Поставить лайк\"\n            ></button>\n            <span className=\"card__like-number\">{likes.length}</span>\n          </div>\n        </div>\n      </article>\n    </li>\n  );\n}\n","import React from \"react\";\nimport Card from \"./Card\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * Gallery - компонент галереи.\n *\n * @prop onImageCard - обработчик клика на изображение карточки.\n * @prop cards - массив всех карточек (после запроса к api).\n * @prop onCardLike - обработчик клика на кнопку лайка карточки.\n * @prop onCardDelete - обработчик клика на кнопку удаления карточки.\n */\nexport default function Gallery({ onImageCard, onCardLike, onCardDelete }) {\n  /**\n   * Параметр карточек галереи.\n   */\n  const cards = useSelector((state) => state.cards);\n\n  return (\n    <section className=\"gallery content__gallery\">\n      <ul className=\"gallery-table\">\n        {cards.map(({ _id, name, link, likes, owner }) => (\n          <Card\n            key={_id}\n            name={name}\n            link={link}\n            likes={likes}\n            owner={owner}\n            _id={_id}\n            onCardClick={onImageCard}\n            onCardLike={onCardLike}\n            onCardDelete={onCardDelete}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport Gallery from \"./Gallery\";\n\n/**\n * Main - основной компонент App. Содержит в себе компоненты Profile и Gallery.\n *\n * @prop onOpenPopup - обработчик данных, вводимых пользователем в форму, при логине.\n * @prop onImageCard - обработчик клика на изображение карточки.\n * @prop onCardLike - обработчик клика на кнопку лайка карточки.\n * @prop onCardDelete - обработчик клика на кнопку удаления карточки.\n */\nexport default function Main({\n  onOpenPopup,\n  onImageCard,\n  onCardLike,\n  onCardDelete,\n}) {\n  return (\n    <main className=\"content section page__content\">\n      <Profile onOpenPopup={onOpenPopup} />\n      <Gallery\n        onImageCard={onImageCard}\n        onCardLike={onCardLike}\n        onCardDelete={onCardDelete}\n      />\n    </main>\n  );\n}\n","/**\n * Footer - компонент футера.\n */\nexport default function Footer() {\n  return (\n    <footer className=\"footer section page__footer\">\n      <p className=\"footer__copyright\">&copy; 2021 Mesto Russia</p>\n    </footer>\n  );\n}\n","import { useState, useCallback } from \"react\";\n\nexport default function useFormAndValidation() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(true);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n    setErrors({ ...errors, [name]: e.target.validationMessage });\n    setIsValid(e.target.closest(\"form\").checkValidity());\n  };\n\n  const resetForm = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false) => {\n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm,\n    setValues,\n    setIsValid,\n  };\n}\n","/**\n * PopupWithForm - компонент попапа с формой.\n *\n * @prop title - название формы, отображающейся в попапе.\n * @prop name - имя формы.\n * @prop submitButtonText - текст кнопки сабмита (меняется при выполнении запросы к api).\n * @prop isOpen - состояние попапа: открыт/закрыт.\n * @prop onClose - функция закрытия попапа.\n * @prop onSubmit - обработчик сабмита формы.\n * @prop children - дочерние элементами формы (инпуты).\n * @prop isValid - состояние валидности формы.\n */\nexport default function PopupWithForm({\n  title,\n  name,\n  submitButtonText,\n  isOpen,\n  onClose,\n  onSubmit,\n  children,\n  isValid,\n}) {\n  /**\n   * Параметр класса попапа.\n   */\n  const popupClassName = `popup ${isOpen && \"popup_opened\"}`;\n\n  return (\n    <div className={popupClassName} onMouseDown={onClose}>\n      <div className=\"popup__container\">\n        <button\n          className=\"button popup__button_type_close\"\n          onClick={onClose}\n          type=\"button\"\n          aria-label=\"Закрыть всплывающее окно\"\n        ></button>\n        <h2 className=\"popup__title\">{title}</h2>\n        <form\n          className=\"popup__form\"\n          action=\"/\"\n          method=\"POST\"\n          onSubmit={onSubmit}\n          name={name}\n        >\n          {children}\n          <button\n            className={`button popup__button_type_submit ${\n              !isValid && \"popup__button_type_submit_disabled\"\n            }`}\n            type=\"submit\"\n            aria-label=\"Сохранить изменения\"\n          >\n            {submitButtonText}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useContext } from \"react\";\nimport useFormAndValidation from \"../hooks/validationHook\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * EditProfilePopup - компонент попапа с формой добавления карточки в галерею.\n * Включает в себя компонент PopupWithForm.\n *\n * @prop onClose - функция закрытия попапа.\n * @prop onUpdateUser - обработчик данных формы при сабмите.\n */\nexport default function EditProfilePopup({ onClose, onUpdateUser }) {\n  /**\n   * Параметр состояния попапа: true - открыт, false - закрыт.\n   */\n  const { editProfilePopupState } = useSelector((state) => state.popup);\n\n  /**\n   * Параметры для валидации формы.\n   */\n  const { values, handleChange, errors, isValid, setValues } =\n    useFormAndValidation();\n\n  /**\n   * Параметры текущего пользователя.\n   */\n  const { name, about } = useSelector((state) => state.user);\n\n  /**\n   * Параметр загрузки данных на сервер.\n   */\n  const isLoading = useSelector((state) => state.loading.isLoading);\n  /**\n   * Хук установки начального состояния формы при открытии попапа.\n   */\n  useEffect(() => {\n    if (editProfilePopupState) {\n      setValues({ name, description: about });\n    }\n  }, [editProfilePopupState]);\n\n  /**\n   * Обработчик сабмита формы.\n   */\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    onUpdateUser({\n      name: values.name,\n      about: values.description,\n    });\n  };\n\n  return (\n    <PopupWithForm\n      title=\"Редактировать профиль\"\n      name=\"editProfileForm\"\n      submitButtonText={!isLoading ? \"Сохранить\" : \"Сохранение...\"}\n      isOpen={editProfilePopupState}\n      onClose={onClose}\n      onSubmit={handleFormSubmit}\n      isValid={isValid}\n    >\n      <div className=\"popup__input-field\">\n        <input\n          type=\"text\"\n          className={`popup__input ${\n            errors?.name && \"popup__input_type_error\"\n          }`}\n          name=\"name\"\n          placeholder=\"Имя пользователя\"\n          value={values?.name || \"\"}\n          onChange={handleChange}\n          required\n          minLength=\"2\"\n          maxLength=\"40\"\n        />\n        {errors?.name && (\n          <span className=\"popup__error\" id=\"nameInputError\">\n            {errors.name}\n          </span>\n        )}\n      </div>\n      <div className=\"popup__input-field\">\n        <input\n          type=\"text\"\n          className={`popup__input ${\n            errors?.description && \"popup__input_type_error\"\n          }`}\n          name=\"description\"\n          placeholder=\"О себе\"\n          value={values?.description || \"\"}\n          onChange={handleChange}\n          required\n          minLength=\"2\"\n          maxLength=\"200\"\n        />\n        {errors?.description && (\n          <span className=\"popup__error\" id=\"aboutInputError\">\n            {errors.description}\n          </span>\n        )}\n      </div>\n    </PopupWithForm>\n  );\n}\n","import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport useFormAndValidation from \"../hooks/validationHook\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * EditAvatarPopup - компонент попапа с формой изменения аватара пользователя.\n * Включает в себя компонент PopupWithForm.\n *\n * @prop onClose - функция закрытия попапа.\n * @prop onUpdateAvatar - обработчик данных формы при сабмите.\n */\nexport default function EditAvatarPopup({ onClose, onUpdateAvatar }) {\n  /**\n   * Параметр состояния попапа: true - открыт, false - закрыт.\n   */\n  const { editAvatarPopupState } = useSelector((state) => state.popup);\n\n  /**\n   * Параметры для валидации формы.\n   */\n  const { values, handleChange, errors, isValid, setValues, resetForm } =\n    useFormAndValidation();\n\n  /**\n   * Параметр загрузки данных на сервер.\n   */\n  const isLoading = useSelector((state) => state.loading.isLoading);\n\n  /**\n   * Хук установки начального состояния формы при открытии попапа.\n   */\n  React.useEffect(() => {\n    if (editAvatarPopupState) {\n      resetForm();\n      setValues({ avatar: \"\" });\n    }\n  }, [editAvatarPopupState]);\n\n  /**\n   * Обработчик сабмита формы.\n   */\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    onUpdateAvatar(values);\n  };\n\n  return (\n    <PopupWithForm\n      title=\"Обновить аватар\"\n      name=\"editAvatarForm\"\n      submitButtonText={!isLoading ? \"Сохранить\" : \"Сохранение...\"}\n      isOpen={editAvatarPopupState}\n      onClose={onClose}\n      onSubmit={handleFormSubmit}\n      isValid={isValid}\n    >\n      <div className=\"popup__input-field\">\n        <input\n          type=\"url\"\n          className={`popup__input ${\n            errors?.avatar && \"popup__input_type_error\"\n          }`}\n          name=\"avatar\"\n          placeholder=\"Ссылка на новый аватар\"\n          value={values?.avatar || \"\"}\n          onChange={handleChange}\n          required\n        />\n        {errors?.avatar && (\n          <span className=\"popup__error\" id=\"avatarLinkInputError\">\n            {errors.avatar}\n          </span>\n        )}\n      </div>\n    </PopupWithForm>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n/**\n * ImagePopup - компонент попапа с полным изображением карточки.\n *\n * @prop onClose - функция закрытия попапа.\n */\nexport default function ImagePopup({ onClose }) {\n  /**\n   * Параметр состояния попапа: true - открыт, false - закрыт.\n   */\n  const { imagePopupState } = useSelector((state) => state.popup);\n\n  /**\n   * Параметр состояния карточки.\n   */\n  const card = useSelector((state) => state.card);\n\n  return (\n    <div\n      className={`popup popup_type_full-image ${\n        card.name && card.link && imagePopupState && \"popup_opened\"\n      }`}\n      onMouseDown={onClose}\n    >\n      <figure className=\"popup__container popup__container_type_full-image\">\n        <button\n          className=\"button popup__button_type_close\"\n          onClick={onClose}\n          type=\"button\"\n          aria-label=\"Закрыть всплывающее окно\"\n        ></button>\n        <img src={card.link} alt={card.name} className=\"popup__full-image\" />\n        <figcaption className=\"popup__full-image-caption\">\n          {card.name}\n        </figcaption>\n      </figure>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport useFormAndValidation from \"../hooks/validationHook\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * AddPlacePopup - компонент попапа с формой добавления карточки в галерею.\n * Включает в себя компонент PopupWithForm.\n *\n * @prop onClose - функция закрытия попапа.\n * @prop onAddPlace - обработчик данных формы при сабмите.\n * @prop submitButtonText - текст кнопки сабмита (меняется при выполнении запросы к api).\n */\nexport default function AddPlacePopup({ onClose, onAddPlace }) {\n  /**\n   * Параметр состояния попапа: true - открыт, false - закрыт.\n   */\n  const { addPlacePopupState } = useSelector((state) => state.popup);\n\n  /**\n   * Параметр загрузки данных на сервер.\n   */\n  const isLoading = useSelector((state) => state.loading.isLoading);\n\n  /**\n   * Параметры для валидации формы.\n   */\n  const { values, handleChange, errors, isValid, setValues, resetForm } =\n    useFormAndValidation();\n\n  /**\n   * Хук установки начального состояния формы при открытии попапа.\n   */\n  useEffect(() => {\n    if (addPlacePopupState) {\n      resetForm();\n      setValues({ name: \"\", link: \"\" });\n    }\n  }, [addPlacePopupState]);\n\n  /**\n   * Обработчик сабмита формы.\n   */\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    onAddPlace(values);\n  };\n\n  return (\n    <PopupWithForm\n      title=\"Новое место\"\n      name=\"addCardForm\"\n      submitButtonText={!isLoading ? \"Создать\" : \"Сохранение...\"}\n      isOpen={addPlacePopupState}\n      onClose={onClose}\n      onSubmit={handleFormSubmit}\n      isValid={isValid}\n    >\n      <div className=\"popup__input-field\">\n        <input\n          type=\"text\"\n          className={`popup__input ${\n            errors?.name && \"popup__input_type_error\"\n          }`}\n          name=\"name\"\n          placeholder=\"Название\"\n          value={values?.name || \"\"}\n          onChange={handleChange}\n          required\n          minLength=\"2\"\n          maxLength=\"30\"\n        />\n        {errors?.name && (\n          <span className=\"popup__error\" id=\"cardTitleInputError\">\n            {errors?.name}\n          </span>\n        )}\n      </div>\n      <div className=\"popup__input-field\">\n        <input\n          type=\"url\"\n          className={`popup__input ${\n            errors?.link && \"popup__input_type_error\"\n          }`}\n          name=\"link\"\n          placeholder=\"Ссылка на картинку\"\n          value={values?.link || \"\"}\n          onChange={handleChange}\n          required\n        />\n        {errors?.link && (\n          <span className=\"popup__error\" id=\"cardLinkInputError\">\n            {errors.link}\n          </span>\n        )}\n      </div>\n    </PopupWithForm>\n  );\n}\n","import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * DeletePlacePopup - компонент попапа с формой удаления карточки в галерею.\n * Включает в себя компонент PopupWithForm.\n *\n * @prop onClose - функция закрытия попапа.\n * @prop onApproveDeletePlace - обработчик подтверждения удаления карточки.\n */\nexport default function DeletePlacePopup({ onClose, onApproveDeletePlace }) {\n  /**\n   * Параметр состояния попапа: true - открыт, false - закрыт.\n   */\n  const { deletePlacePopupState } = useSelector((state) => state.popup);\n\n  /**\n   * Обработчик сабмита формы.\n   */\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    onApproveDeletePlace();\n  };\n\n  return (\n    <PopupWithForm\n      title=\"Вы уверены?\"\n      name=\"delete-card\"\n      submitButtonText=\"Да\"\n      isOpen={deletePlacePopupState}\n      onClose={onClose}\n      onSubmit={handleFormSubmit}\n      isValid={true}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Register - компонент со страницей регистрации пользователя.\n *\n * @prop onRegister - обработчик данных, вводимых пользователем в форму, при регистрации.\n */\nexport default function Register({ onRegister }) {\n  /**\n   * Параметр состояния инпутов формы.\n   */\n  const [registerInputValues, setRegisterInputValues] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  /**\n   * Обработчик ввода данных в инпуты формы.\n   */\n  const handleInputChange = (evt) => {\n    const { name, value } = evt.target;\n    setRegisterInputValues({\n      ...registerInputValues,\n      [name]: value,\n    });\n  };\n\n  /**\n   * Обработчик сабмита формы.\n   */\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    const { password, email } = registerInputValues;\n    onRegister(password, email);\n  };\n\n  return (\n    <section className=\"sign\">\n      <h1 className=\"sign__title\">Регистрация</h1>\n      <form className=\"sign__form\" onSubmit={handleFormSubmit}>\n        <input\n          className=\"sign__input\"\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={registerInputValues.email}\n          onChange={handleInputChange}\n        />\n        <input\n          className=\"sign__input\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          value={registerInputValues.password}\n          onChange={handleInputChange}\n        />\n        <button\n          className=\"button sign__button\"\n          type=\"submit\"\n          aria-label=\"Сохранить изменения\"\n        >\n          Зарегистрироваться\n        </button>\n      </form>\n      <p className=\"sign__subtitle\">\n        Уже зарегистрированы?{\" \"}\n        <Link to=\"sign-in\" className=\"sign__link\">\n          Войти\n        </Link>\n      </p>\n    </section>\n  );\n}\n","import React, { useState } from \"react\";\n\n/**\n * Login - компонент со страницей логина пользователя.\n *\n * @prop onLogin - обработчик данных, вводимых пользователем в форму, при логине.\n */\nexport default function Login({ onLogin }) {\n  /**\n   * Параметр состояния инпутов формы.\n   */\n  const [loginInputValues, setLoginInputValues] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  /**\n   * Обработчик ввода данных в инпуты формы.\n   */\n  const handleInputChange = (evt) => {\n    const { name, value } = evt.target;\n    setLoginInputValues({\n      ...loginInputValues,\n      [name]: value,\n    });\n  };\n\n  /**\n   * Обработчик сабмита формы.\n   */\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    const { password, email } = loginInputValues;\n    onLogin(password, email);\n  };\n\n  return (\n    <section className=\"sign\">\n      <h1 className=\"sign__title\">Вход</h1>\n      <form className=\"sign__form\" onSubmit={handleFormSubmit}>\n        <input\n          className=\"sign__input\"\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={loginInputValues.email}\n          onChange={handleInputChange}\n        />\n        <input\n          className=\"sign__input\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          value={loginInputValues.password}\n          onChange={handleInputChange}\n        />\n        <button\n          className=\"button sign__button\"\n          type=\"submit\"\n          aria-label=\"Сохранить изменения\"\n        >\n          Войти\n        </button>\n      </form>\n    </section>\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * ProtectedRoute - компонент с защищенным роутом.\n * Определяет залогинен ли пользователь, перенаправляя на нужный компонент или адрес.\n *\n * @prop Component - компонент, на который происходит перенаправление при логине пользователя.\n * @prop props - все остальные пропсы этого компонента\n */\nexport default function ProtectedRoute({ component: Component, ...props }) {\n  /**\n   * Параметр статуса логина пользователя.\n   */\n  const { isLoggedIn } = useSelector((state) => state.auth);\n\n  return (\n    <Route exact path={props.path}>\n      {isLoggedIn ? <Component {...props} /> : <Redirect to=\"/sign-in\" />}\n    </Route>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * InfoTooltip - компонент попапа с формой добавления карточки в галерею.\n *\n * @prop onClose - функция закрытия попапа.\n */\nexport default function InfoTooltip({ onClose }) {\n  /**\n   * Параметр состояния попапа: true - открыт, false - закрыт.\n   */\n  const { infoTooltipState } = useSelector((state) => state.popup);\n\n  /**\n   * Параметр состояния регистрации пользователя.\n   */\n  const { isRegistered } = useSelector((state) => state.auth);\n\n  /**\n   * Параметр класса попапа.\n   */\n  const popupClassName = `popup ${infoTooltipState && \"popup_opened\"}`;\n\n  const title = isRegistered\n    ? \"Вы успешно зарегистрировались!\"\n    : \"Что-то пошло не так! Попробуйте ещё раз.\";\n\n  const signClassName = `popup__info-sign ${\n    isRegistered\n      ? \"popup__info-sign_type_success\"\n      : \"popup__info-sign_type_fail\"\n  }`;\n\n  return (\n    <div className={popupClassName} onMouseDown={onClose}>\n      <div className=\"popup__container\">\n        <button\n          className=\"button popup__button_type_close\"\n          onClick={onClose}\n          type=\"button\"\n          aria-label=\"Закрыть всплывающее окно\"\n        ></button>\n        <div className={signClassName}></div>\n        <h2 className=\"popup__title popup__info-title\">{title}</h2>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useCallback } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport * as api from \"../utils/api\";\nimport * as apiAuth from \"../utils/apiAuth\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  openPopupAction,\n  closePopupAction,\n} from \"../store/reducers/popupReducer\";\nimport {\n  loginAction,\n  logoutAction,\n  registerAction,\n  unregisterAction,\n} from \"../store/reducers/authReducer\";\nimport {\n  getUserAction,\n  updateProfileAction,\n  updateAvatarAction,\n} from \"../store/reducers/userReducer\";\nimport {\n  getCardsAction,\n  addCardAction,\n  likeCardAction,\n  deleteCardAction,\n} from \"../store/reducers/galleryReducer\";\nimport {\n  openedCardAction,\n  deletedCardAction,\n} from \"../store/reducers/cardReducer\";\nimport {\n  loadingDataAction,\n  loadedDataAction,\n} from \"../store/reducers/loadingReducer\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport ImagePopup from \"./ImagePopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport DeletePlacePopup from \"./DeletePlacePopup\";\nimport Register from \"./Register\";\nimport Login from \"./Login\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport InfoTooltip from \"./InfoTooltip\";\n\n/**\n * App - главный компонент приложения.\n * Включает в себя все компоненты и логику работу приложения.\n */\n\nconst App = () => {\n  /**\n   * Хук для подключения dispatch.\n   */\n  const dispatch = useDispatch();\n\n  /**\n   * Хук для определения history.\n   */\n  const history = useHistory();\n\n  /**\n   * Параметр статуса логина пользователя\n   */\n  const { isLoggedIn } = useSelector((state) => state.auth);\n\n  /**\n   * Параметр с текущим пользователем.\n   */\n  const currentUser = useSelector((state) => state.user);\n\n  /**\n   * Параметр карточки: opened - для полного изображения карточки, deleted - для удаляемой карточки.\n   */\n  const card = useSelector((state) => state.card);\n\n  /**\n   * Функция открытия попапа. Дополнительно устанавливается слушатель на клик по клавише Esc.\n   *\n   * @param popupType - тип попапа\n   */\n\n  const onOpenPopup = (popupType) => {\n    dispatch(openPopupAction({ payload: popupType }));\n    document.addEventListener(\"keydown\", handleEscClick);\n  };\n\n  /**\n   * Функция закрытия попапа. Дополнительно удаляется слушатель на клик по клавише Esc.\n   */\n  const onClosePopup = (evt) => {\n    //если клик не по оверлэю, то не закрываем попап\n    if (evt && evt.target !== evt.currentTarget) {\n      return;\n    }\n    dispatch(closePopupAction());\n    document.removeEventListener(\"keydown\", handleEscClick);\n  };\n\n  /**\n   * Обработчик нажатия на клавишу Escape.\n   */\n  const handleEscClick = useCallback((evt) => {\n    if (evt.key === \"Escape\") {\n      onClosePopup();\n    }\n  }, []);\n\n  /**\n   * Обработчик регистрации пользователя: отправляет запрос на api с параметрами password, email.\n   *\n   * @param password - пароль, вводимый пользователем\n   * @param email - email, вводимый пользователя\n   */\n  const handleRegister = (password, email) => {\n    apiAuth\n      .register(password, email)\n      .then(() => {\n        dispatch(registerAction());\n        onOpenPopup(\"infoTooltip\");\n      })\n      .catch((error) => {\n        dispatch(unregisterAction());\n        onOpenPopup(\"infoTooltip\");\n        handleError(error);\n      });\n  };\n\n  /**\n   * Хук для проверки наличия токена пользователя в LocalStorage при открытии сайта.\n   */\n  useEffect(() => {\n    checkUserToken();\n  }, []);\n\n  /**\n   * Проверка токена в localStorage. При его наличии, устанавливаем, что пользователь залогинен,\n   * и перенаправляем на \"/\".\n   */\n  const checkUserToken = () => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      apiAuth\n        .isTokenValid(token)\n        .then((user) => {\n          const { data } = user;\n          const { email } = data;\n          dispatch(loginAction(email));\n          history.push(\"/\");\n        })\n        .catch(handleError);\n    }\n  };\n\n  /**\n   * Обработчик ошибок, возникающих при запросах.\n   */\n  const handleError = (error) => {\n    console.log(error);\n  };\n\n  /**\n   * Обработчик логина пользователя: отправляет запрос на api с параметрами password, email.\n   *\n   * @param password - пароль, вводимый пользователем\n   * @param email - email, вводимый пользователя\n   */\n  const handleLogin = (password, email) => {\n    apiAuth\n      .authorize(password, email)\n      .then((data) => {\n        if (data) {\n          const { token } = data;\n          localStorage.setItem(\"token\", token);\n          checkUserToken();\n        }\n      })\n      .catch(handleError);\n  };\n\n  /**\n   * Обработчик разлогинивания пользователя из аккаунта: удаление token из LocalStorage.\n   */\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    dispatch(logoutAction());\n    history.push(\"/sign-in\");\n  };\n\n  /**\n   * Хук с запросом на api всех карточек с сервера, обновления стета с карточками.\n   */\n  useEffect(() => {\n    api\n      .getCards()\n      .then((cardsData) => dispatch(getCardsAction(cardsData)))\n      .catch((err) => console.log(`Ошибка: ${err}`));\n  }, []);\n\n  /**\n   * Обработчик нажатия на кнопку лайка карточки.\n   *\n   * @param likes - массив с пользователями, лайкнувшими карточку.\n   * @param cardId - id карточки, выбранной для установки лайка.\n   */\n  const handleCardLike = (likes, cardId) => {\n    const isLiked = likes.some((user) => user._id === currentUser._id);\n    api\n      .changeLikeCardStatus(cardId, isLiked)\n      .then((newCard) => {\n        dispatch(likeCardAction({ cardId: cardId, newCard: newCard }));\n      })\n      .catch((err) => console.log(`Ошибка: ${err}`));\n  };\n\n  /**\n   * Функция подтверждения удаления карточки.\n   */\n  const onApproveDeletePlace = () => {\n    onClosePopup();\n    if (card._id) {\n      api\n        .deleteCard(card._id)\n        .then(dispatch(deleteCardAction(card._id)))\n        .then(() => onClosePopup())\n        .catch((err) => console.log(`Ошибка: ${err}`));\n    }\n  };\n\n  /**\n   * Обработчик нажатия клика по кнопке удаления карточки.\n   *\n   * @param cardId - id карточки, выбранной для удаления.\n   */\n  const handleCardDeleteButtonClick = (cardId) => {\n    onOpenPopup(\"deletePlacePopup\");\n    dispatch(deletedCardAction(cardId));\n  };\n\n  /**\n   * Обработчик нажатия на сабмит формы добавления новой карточки.\n   *\n   * @param inputValuesData - данные новой карточки для добавления в галерею, введенные в форму пользователем..\n   */\n  const handleAddPlaceSubmit = (inputValuesData) => {\n    dispatch(loadingDataAction());\n    api\n      .addCard(inputValuesData)\n      .then((newCard) => dispatch(addCardAction(newCard)))\n      .then(() => onClosePopup())\n      .catch((err) => console.log(`Ошибка: ${err}`))\n      .finally(() => dispatch(loadedDataAction()));\n  };\n\n  /**\n   * Хук с запросом на api данных текущего пользователя.\n   */\n  useEffect(() => {\n    api\n      .getUserData()\n      .then((user) => dispatch(getUserAction(user)))\n      .catch((err) => console.log(`Ошибка: ${err}`));\n  }, []);\n\n  /**\n   * Обработчик нажатия на кнопку удаления карточки.\n   *\n   * @param inputValuesData - новые данные профиля, введенные в форму пользователем.\n   */\n  const handleUpdateUser = (inputValuesData) => {\n    dispatch(loadingDataAction());\n    api\n      .updateUserData(inputValuesData)\n      .then((data) => dispatch(updateProfileAction(data)))\n      .then(() => onClosePopup())\n      .catch((err) => console.log(`Ошибка: ${err}`))\n      .finally(() => dispatch(loadedDataAction()));\n  };\n\n  /**\n   * Обработчик нажатия на кнопку удаления карточки.\n   *\n   * @param inputValuesData - новые данные аватара (ссылка на изображение), введенные в форму пользователем.\n   */\n  const handleUpdateAvatar = (inputValuesData) => {\n    dispatch(loadingDataAction());\n    api\n      .updateAvatar(inputValuesData)\n      .then((data) => dispatch(updateAvatarAction(data)))\n      .then(() => onClosePopup())\n      .catch((err) => console.log(`Ошибка: ${err}`))\n      .finally(() => dispatch(loadedDataAction()));\n  };\n\n  /**\n   * Обработчик нажатия на изображение карточки.\n   * По клику открывается попап с полным изображением.\n   *\n   * @param card - объект с данными карточки (название name, ссылка link)\n   */\n  const handleCardClick = (card) => {\n    dispatch(openedCardAction(card));\n    onOpenPopup(\"imagePopup\");\n  };\n\n  return (\n    <>\n      <Header onLogout={handleLogout} />\n      <Switch>\n        <Route exact path=\"/sign-in\">\n          <Login onLogin={handleLogin} />\n        </Route>\n        <Route exact path=\"/sign-up\">\n          <Register onRegister={handleRegister} />\n        </Route>\n        <ProtectedRoute\n          path=\"/\"\n          component={Main}\n          onOpenPopup={onOpenPopup}\n          onImageCard={handleCardClick}\n          onCardLike={handleCardLike}\n          onCardDelete={handleCardDeleteButtonClick}\n        />\n        {isLoggedIn && <Footer />}\n      </Switch>\n      <EditProfilePopup\n        onClose={onClosePopup}\n        onUpdateUser={handleUpdateUser}\n      />\n      <EditAvatarPopup\n        onClose={onClosePopup}\n        onUpdateAvatar={handleUpdateAvatar}\n      />\n      <AddPlacePopup onClose={onClosePopup} onAddPlace={handleAddPlaceSubmit} />\n      <DeletePlacePopup\n        onClose={onClosePopup}\n        onApproveDeletePlace={onApproveDeletePlace}\n      />\n      <ImagePopup onClose={onClosePopup} />\n      <InfoTooltip onClose={onClosePopup} />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore, combineReducers } from \"redux\";\nimport { popupReducer } from \"./reducers/popupReducer\";\nimport { authReducer } from \"./reducers/authReducer\";\nimport { userReducer } from \"./reducers/userReducer\";\nimport { galleryReducer } from \"./reducers/galleryReducer\";\nimport { cardReducer } from \"./reducers/cardReducer\";\nimport { loadingReducer } from \"./reducers/loadingReducer\";\n\n/**\n * Корневой редьюсер, выключающий в себя все редьюсеры приложения.\n */\nconst rootReducer = combineReducers({\n  popup: popupReducer,\n  auth: authReducer,\n  user: userReducer,\n  cards: galleryReducer,\n  card: cardReducer,\n  loading: loadingReducer,\n});\n\n/**\n * Store данного приложения.\n */\nexport const store = createStore(rootReducer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./store/store.js\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}