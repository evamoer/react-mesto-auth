{"version":3,"sources":["utils/api.ts","utils/apiAuth.ts","images/logo.svg","components/Header.tsx","components/Profile.tsx","components/Card.tsx","components/Gallery.tsx","components/Main.tsx","components/Footer.tsx","hooks/validationHook.tsx","components/PopupWithForm.tsx","store/reducers/popupReducer.ts","components/EditProfilePopup.tsx","components/EditAvatarPopup.tsx","components/ImagePopup.tsx","components/AddPlacePopup.tsx","components/DeletePlacePopup.tsx","components/Register.tsx","components/Login.tsx","components/ProtectedRoute.tsx","components/InfoTooltip.tsx","store/reducers/authReducer.ts","store/reducers/galleryReducer.ts","store/reducers/userReducer.ts","store/reducers/cardReducer.ts","store/reducers/loadingReducer.ts","components/App.tsx","reportWebVitals.js","store/store.ts","index.tsx"],"names":["BASE_URL","headers","authorization","checkResponse","response","ok","json","Promise","reject","statusText","Header","onLogout","currentLocation","useLocation","pathname","useSelector","state","auth","isLoggedIn","userEmail","className","src","logoPath","alt","to","onClick","Profile","onOpenPopup","user","avatar","name","about","type","Card","link","likes","owner","_id","onCardClick","onCardLike","onCardDelete","currentUser","isOwn","isLiked","some","length","Gallery","onImageCard","cards","map","Main","Footer","useFormAndValidation","useState","values","setValues","errors","setErrors","isValid","setIsValid","resetForm","useCallback","newValues","newErrors","newIsValid","handleChange","evt","target","value","validationMessage","closest","checkValidity","popupActions","PopupWithForm","title","submitButtonText","isOpen","onMouseDown","onClose","onSubmit","children","popupClassName","action","method","EditProfilePopup","onUpdateUser","editProfilePopupState","popup","isLoading","loading","useEffect","preventDefault","placeholder","onChange","required","minLength","maxLength","id","EditAvatarPopup","onUpdateAvatar","editAvatarPopupState","ImagePopup","imagePopupState","card","AddPlacePopup","onAddPlace","addPlacePopupState","DeletePlacePopup","onApproveDeletePlace","deletePlacePopupState","undefined","Register","onRegister","email","password","registerInputValues","setRegisterInputValues","handleInputChange","Login","onLogin","loginInputValues","setLoginInputValues","ProtectedRoute","Component","component","props","InfoTooltip","infoTooltipState","isRegistered","signClassName","popupState","authActions","authState","galleryActions","userState","cohort","GET_USER","UPDATE_PROFILE","UPDATE_AVATAR","galleryState","cardActions","cardState","createdAt","loadingActions","loadingState","loadingDataAction","LOADING","loadedDataAction","LOADED","App","dispatch","useDispatch","history","useHistory","popupType","payload","OPEN","document","addEventListener","handleEscClick","closePopup","CLOSE","removeEventListener","handleOverlayClick","currentTarget","key","checkUserToken","token","localStorage","getItem","fetch","Authorization","then","apiAuth","data","LOG_IN","push","catch","handleError","error","console","log","cardsData","GET_CARDS","err","removeItem","LOG_OUT","exact","path","body","JSON","stringify","setItem","Accept","REGISTERED","UNREGISTERED","OPENED_CARD","cardId","likeStatus","api","newCard","LIKE_CARD","DELETED_CARD","inputValuesData","finally","avatarValue","cardData","ADD_CARD","DELETE_CARD","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","filter","store","createStore","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.cb1a6e14.chunk.js","sourcesContent":["import { inputValues } from \"../hooks/validationHook\";\r\n\r\n/**\r\n * URL сервера для нашей когорты, вынесенная в константу.\r\n */\r\nexport const BASE_URL: string = \"https://mesto.nomoreparties.co/v1/cohort-27\";\r\n\r\n/**\r\n * Заголовки запросов, вынесенные в константу.\r\n */\r\nexport const headers: { authorization: string; \"Content-Type\": string } = {\r\n  authorization: \"8db06075-d4ea-471e-8c36-db2b91e349e8\",\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\n/**\r\n * Обработчик ответа запроса с сервера для разных случаев.\r\n * @param response - ответ запроса.\r\n */\r\nconst checkResponse = (response: any): Promise<any> => {\r\n  if (response.ok) {\r\n    return response.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${response.statusText}`);\r\n};\r\n\r\n/**\r\n * GET запрос на текущие карточки в галерее.\r\n */\r\nexport const getCards = (): Promise<any> => {\r\n  return fetch(`${BASE_URL}/cards`, {\r\n    headers: headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * POST запрос на создание новой карточки в галерее.\r\n * @param cardData - данные из кормы компонента AddPlacrPopup.\r\n */\r\nexport const addCard = (cardData: inputValues): Promise<any> => {\r\n  return fetch(`${BASE_URL}/cards`, {\r\n    method: \"POST\",\r\n    headers: headers,\r\n    body: JSON.stringify({\r\n      name: cardData.name,\r\n      link: cardData.link,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * DELETE запрос на удаление карточки из галереи.\r\n * @param cardId - id карточки, удаляемой из галереи.\r\n */\r\nexport const deleteCard = (cardId: string): Promise<any> => {\r\n  return fetch(`${BASE_URL}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * Обработчик запроса нажатия на кнопку лайка карточки (установка/снятие лайка):\r\n * если лайк не был поставлен, то запрос PUT,\r\n * если лайк уже был поставлен, то запрос DELETE.\r\n * @param likeStatus - проверка наличия лайка на карточке.\r\n * @param cardId - id карточки, на которую нажали.\r\n */\r\nexport const changeLikeCardStatus = (\r\n  cardId: string,\r\n  likeStatus: boolean\r\n): Promise<any> => {\r\n  return fetch(`${BASE_URL}/cards/likes/${cardId}`, {\r\n    method: likeStatus ? \"DELETE\" : \"PUT\",\r\n    headers: headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * GET запрос на данные текущего пользователя.\r\n */\r\nexport const getUserData = (): Promise<any> => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    headers: headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * PATCH запрос на обновление данных профиля текущего пользователя.\r\n * @param inputValuesData - данные из формы компонента EditProfilePopup.\r\n */\r\nexport const updateUserData = (inputValuesData: inputValues): Promise<any> => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: headers,\r\n    body: JSON.stringify({\r\n      name: inputValuesData.name,\r\n      about: inputValuesData.about,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * PATCH запрос на обновление данных аватара текущего пользователя.\r\n * @param inputValuesData - данные из формы компонента EditAvatarPopup.\r\n */\r\nexport const updateAvatar = (avatarValue: inputValues): Promise<any> => {\r\n  return fetch(`${BASE_URL}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarValue.avatar,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n","/**\r\n * URL сервера для нашей когорты, вынесенная в константу.\r\n */\r\nexport const BASE_URL: string = \"https://auth.nomoreparties.co\";\r\n\r\n/**\r\n * Обработчик ответа запроса с сервера для разных случаев.\r\n * @param response - ответ запроса.\r\n */\r\nconst checkResponse = (response: any): Promise<any> => {\r\n  if (response.ok) {\r\n    return response.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${response.statusText}`);\r\n};\r\n\r\n/**\r\n * POST запрос на регистрацию нового пользователя.\r\n * @param password - пароль регистрируемого пользователя, вводимый в форму компонента Register.\r\n * @param email - email регистрируемого пользователя, вводимый в форму компонента Register.\r\n */\r\nexport const register = (password: string, email: string): Promise<any> => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * POST запрос на авторизацию пользователя.\r\n * @param password - пароль авторизируемого пользователя, вводимый в форму компонента Login.\r\n * @param email - email авторизируемого пользователя, вводимый в форму компонента Login.\r\n */\r\nexport const authorize = (password: string, email: string): Promise<any> => {\r\n  return fetch(`${BASE_URL}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ password, email }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n/**\r\n * GET запрос на проверку токена пользователя.\r\n * @param token - токен, хранимый в localStorage пользователя.\r\n */\r\nexport const isTokenValid = (token: string): Promise<any> => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  }).then(checkResponse);\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.bbe2a6ea.svg\";","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\nimport logoPath from \"../images/logo.svg\";\r\n\r\n/**\r\n * Интерфейс для Header.\r\n * @prop onLogout - обработчик клика на кнопку Выйти.\r\n */\r\n\r\ninterface HeaderProps {\r\n  onLogout: () => void;\r\n}\r\n\r\n/**\r\n * Header - компонент хэдера.\r\n */\r\nconst Header: React.FunctionComponent<HeaderProps> = ({ onLogout }) => {\r\n  /**\r\n   * Хук для определения текущего URL.\r\n   */\r\n  const location = useLocation();\r\n\r\n  /**\r\n   * Параметр с текущим URL.\r\n   */\r\n  const currentLocation = location.pathname;\r\n\r\n  /**\r\n   * Параметры статуса логина пользователя и его email.\r\n   */\r\n  const { isLoggedIn, userEmail } = useSelector(\r\n    (state: RootState) => state.auth\r\n  );\r\n\r\n  return (\r\n    <header className=\"header page__header\">\r\n      <img src={logoPath} alt=\"Лого Mesto Russia\" className=\"header__logo\" />\r\n      <div className=\"header__navigation\">\r\n        {isLoggedIn && currentLocation === \"/\" && (\r\n          <>\r\n            <p className=\"header__user-email\">{userEmail}</p>\r\n            <Link\r\n              to=\"sign-up\"\r\n              className=\"header__link header__link_type_logout\"\r\n              onClick={onLogout}\r\n            >\r\n              Выйти\r\n            </Link>\r\n          </>\r\n        )}\r\n        {!isLoggedIn && currentLocation === \"/sign-up\" && (\r\n          <Link to=\"sign-in\" className=\"header__link\">\r\n            Войти\r\n          </Link>\r\n        )}\r\n        {!isLoggedIn && currentLocation === \"/sign-in\" && (\r\n          <Link to=\"sign-up\" className=\"header__link\">\r\n            Регистрация\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\n\r\n/**\r\n * Интерфейс для Profile.\r\n * @prop onOpenPopup - обработчик клика на кнопки открытия попапов.\r\n */\r\n\r\ninterface ProfileProps {\r\n  onOpenPopup: (popupType: string) => void;\r\n}\r\n\r\n/**\r\n * Profile - компонент профиля.\r\n */\r\nconst Profile: React.FunctionComponent<ProfileProps> = ({ onOpenPopup }) => {\r\n  /**\r\n   * Параметры текущего пользователя.\r\n   */\r\n  const { avatar, name, about } = useSelector((state: RootState) => state.user);\r\n\r\n  /**\r\n   * Обработчик клика на кнопку открытия попапа редактирования профиля.\r\n   */\r\n  const openEditProfilePopup = () => {\r\n    onOpenPopup(\"editProfilePopup\");\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика на кнопку открытия попапа изменения аватара.\r\n   */\r\n  const openEditAvatarPopup = () => {\r\n    onOpenPopup(\"editAvatarPopup\");\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика на кнопку открытия попапа добавления карточки.\r\n   */\r\n  const openAddPlacePopup = () => {\r\n    onOpenPopup(\"addPlacePopup\");\r\n  };\r\n\r\n  return (\r\n    <section className=\"profile content__profile\">\r\n      <div className=\"profile__avatar-container\" onClick={openEditAvatarPopup}>\r\n        <img src={avatar} alt=\"Аватар профиля\" className=\"profile__avatar\" />\r\n      </div>\r\n      <div className=\"profile__info\">\r\n        <h1 className=\"profile__name\">{name}</h1>\r\n        <button\r\n          className=\"button button_type_edit-profile\"\r\n          onClick={openEditProfilePopup}\r\n          type=\"button\"\r\n          aria-label=\"Редактировать профиль\"\r\n        ></button>\r\n        <p className=\"profile__about\">{about}</p>\r\n      </div>\r\n      <button\r\n        className=\"button button_type_add-place\"\r\n        onClick={openAddPlacePopup}\r\n        type=\"button\"\r\n        aria-label=\"Добавить место\"\r\n      ></button>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\n\r\n/**\r\n * Интерфейс для Card.\r\n * @prop name - название карточки.\r\n * @prop link - ссылка на изображение карточки.\r\n * @prop likes - массив пользователей, лайкнувших карточку.\r\n * @prop owner - массив данных пользователя, загрузившего карточку.\r\n * @prop _id - id карточки.\r\n * @prop onCardClick - обработчик клика на изображение карточки.\r\n * @prop onCardLike - обработчик клика на кнопку лайка карточки.\r\n * @prop onCardDelete - обработчик клика на кнопку удаления карточки.\r\n */\r\n\r\ninterface CardProps {\r\n  name: string;\r\n  link: string;\r\n  likes: any[];\r\n  owner: {\r\n    name: string;\r\n    about: string;\r\n    avatar?: string;\r\n    _id: string;\r\n  };\r\n  _id: string;\r\n  onCardClick: (values: { name: string; link: string }) => void;\r\n  onCardLike: (likes: any[], _id: string) => void;\r\n  onCardDelete: (_id: string) => void;\r\n}\r\n\r\n/**\r\n * Card - компонент карточки в галерее.\r\n */\r\nconst Card: React.FunctionComponent<CardProps> = ({\r\n  name,\r\n  link,\r\n  likes,\r\n  owner,\r\n  _id,\r\n  onCardClick,\r\n  onCardLike,\r\n  onCardDelete,\r\n}) => {\r\n  /**\r\n   * Параметры текущего пользователя.\r\n   */\r\n  const currentUser = useSelector((state: RootState) => state.user);\r\n\r\n  /**\r\n   * Параметр, определяющий, является ли пользователь создателем карточки.\r\n   * Необходим для отрисовки нопки удаления карточки.\r\n   */\r\n  const isOwn = owner._id === currentUser._id;\r\n\r\n  /**\r\n   * Параметр, определяющий, лайкнул ли пользователь карточку.\r\n   * Необходим для отображения активного лайка карточки.\r\n   */\r\n  const isLiked = likes.some((user) => user._id === currentUser._id);\r\n\r\n  /**\r\n   * Обработчик клика на изображение карточки.\r\n   */\r\n  const handleCardClick = () => {\r\n    onCardClick({ name: name, link: link });\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика на кнопку лайка карточки.\r\n   */\r\n  const handleLikeClick = () => {\r\n    onCardLike(likes, _id);\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика на кнопку удаления карточки.\r\n   */\r\n  const handleDeleteClick = () => {\r\n    onCardDelete(_id);\r\n  };\r\n\r\n  return (\r\n    <li className=\"gallery-table__item\">\r\n      {isOwn && (\r\n        <button\r\n          className={\"button card__delete-button\"}\r\n          onClick={handleDeleteClick}\r\n        ></button>\r\n      )}\r\n      <article className=\"card\">\r\n        <div className=\"card__image-container\" onClick={handleCardClick}>\r\n          <img src={link} alt={name} className=\"card__image\" />\r\n        </div>\r\n        <div className=\"card__info\">\r\n          <h2 className=\"card__title\">{name}</h2>\r\n          <div className=\"card__like-area\">\r\n            <button\r\n              className={`button card__like-button ${\r\n                isLiked && \"card__like-button_active\"\r\n              }`}\r\n              onClick={handleLikeClick}\r\n              type=\"button\"\r\n              aria-label=\"Поставить лайк\"\r\n            ></button>\r\n            <span className=\"card__like-number\">{likes.length}</span>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\nimport Card from \"./Card\";\r\n\r\n/**\r\n * Интерфейс для Gallery.\r\n * @prop onImageCard - обработчик клика на изображение карточки.\r\n * @prop onCardLike - обработчик клика на кнопку лайка карточки.\r\n * @prop onCardDelete - обработчик клика на кнопку удаления карточки.\r\n */\r\n\r\ninterface GalleryProps {\r\n  onImageCard: (values: { name: string; link: string }) => void;\r\n  onCardLike: (likes: any[], _id: string) => void;\r\n  onCardDelete: (_id: string) => void;\r\n}\r\n\r\n/**\r\n * Gallery - компонент галереи.\r\n */\r\nconst Gallery: React.FunctionComponent<GalleryProps> = ({\r\n  onImageCard,\r\n  onCardLike,\r\n  onCardDelete,\r\n}) => {\r\n  /**\r\n   * Параметр карточек галереи.\r\n   */\r\n  const cards = useSelector((state: RootState) => state.cards);\r\n\r\n  return (\r\n    <section className=\"gallery content__gallery\">\r\n      <ul className=\"gallery-table\">\r\n        {cards.map(({ _id, name, link, likes, owner }) => (\r\n          <Card\r\n            key={_id}\r\n            name={name}\r\n            link={link}\r\n            likes={likes}\r\n            owner={owner}\r\n            _id={_id}\r\n            onCardClick={onImageCard}\r\n            onCardLike={onCardLike}\r\n            onCardDelete={onCardDelete}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport Gallery from \"./Gallery\";\r\n\r\n/**\r\n * Интерфейс для Main.\r\n * @prop onOpenPopup - обработчик данных, вводимых пользователем в форму, при логине.\r\n * @prop onImageCard - обработчик клика на изображение карточки.\r\n * @prop onCardLike - обработчик клика на кнопку лайка карточки.\r\n * @prop onCardDelete - обработчик клика на кнопку удаления карточки.\r\n */\r\n\r\ninterface MainProps {\r\n  onOpenPopup: () => void;\r\n  onImageCard: (values: { name: string; link: string }) => void;\r\n  onCardLike: (likes: any[], _id: string) => void;\r\n  onCardDelete: (_id: string) => void;\r\n}\r\n\r\n/**\r\n * Main - основной компонент App. Содержит в себе компоненты Profile и Gallery.\r\n */\r\nconst Main: React.FunctionComponent<MainProps> = ({\r\n  onOpenPopup,\r\n  onImageCard,\r\n  onCardLike,\r\n  onCardDelete,\r\n}) => {\r\n  return (\r\n    <main className=\"content section page__content\">\r\n      <Profile onOpenPopup={onOpenPopup} />\r\n      <Gallery\r\n        onImageCard={onImageCard}\r\n        onCardLike={onCardLike}\r\n        onCardDelete={onCardDelete}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","/**\r\n * Footer - компонент футера.\r\n */\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer section page__footer\">\r\n      <p className=\"footer__copyright\">&copy; 2021 Mesto Russia</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useCallback } from \"react\";\r\n\r\nexport interface inputValues {\r\n  name?: string;\r\n  about?: string;\r\n  link?: string;\r\n  avatar?: string;\r\n}\r\nexport interface errorValues {\r\n  name?: string;\r\n  about?: string;\r\n  link?: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport default function useFormAndValidation() {\r\n  const [values, setValues] = useState<inputValues>({\r\n    name: \"\",\r\n    about: \"\",\r\n    link: \"\",\r\n    avatar: \"\",\r\n  });\r\n  const [errors, setErrors] = useState<errorValues>({});\r\n  const [isValid, setIsValid] = useState<boolean>(true);\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { name, value } = evt.target;\r\n    setValues({ ...values, [name]: value });\r\n    setErrors({ ...errors, [name]: evt.target.validationMessage });\r\n    setIsValid(evt.target.closest(\"form\")!.checkValidity());\r\n  };\r\n\r\n  const resetForm = useCallback(\r\n    (\r\n      newValues: {} = {},\r\n      newErrors: {} = {},\r\n      newIsValid: boolean = false\r\n    ): void => {\r\n      setValues(newValues);\r\n      setErrors(newErrors);\r\n      setIsValid(newIsValid);\r\n    },\r\n    [setValues, setErrors, setIsValid]\r\n  );\r\n\r\n  return {\r\n    values,\r\n    handleChange,\r\n    errors,\r\n    isValid,\r\n    resetForm,\r\n    setValues,\r\n    setIsValid,\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\n/**\r\n * Интерфейс для PopupWithForm.\r\n * @prop title - название формы, отображающейся в попапе.\r\n * @prop name - имя формы.\r\n * @prop submitButtonText - текст кнопки сабмита (меняется при выполнении запросы к api).\r\n * @prop isOpen - состояние попапа: открыт/закрыт.\r\n * @prop onClose - функция закрытия попапа.\r\n * @prop onMouseDown - обработчик закрытия попапа по клику на оверлэй.\r\n * @prop onSubmit - обработчик сабмита формы.\r\n * @prop children - дочерние элементами формы (инпуты).\r\n * @prop isValid - состояние валидности формы.\r\n */\r\ninterface PopupWithFormProps {\r\n  title: string;\r\n  name: string;\r\n  submitButtonText: string;\r\n  isOpen: boolean;\r\n  onMouseDown: (evt: React.MouseEvent) => void;\r\n  onClose: () => void;\r\n  onSubmit: (evt: React.ChangeEvent<HTMLFormElement>) => void;\r\n  children: React.ReactElement | React.ReactNode;\r\n  isValid: boolean;\r\n}\r\n\r\n/**\r\n * PopupWithForm - компонент попапа с формой.\r\n */\r\nconst PopupWithForm: React.FunctionComponent<PopupWithFormProps> = ({\r\n  title,\r\n  name,\r\n  submitButtonText,\r\n  isOpen,\r\n  onMouseDown,\r\n  onClose,\r\n  onSubmit,\r\n  children,\r\n  isValid,\r\n}) => {\r\n  /**\r\n   * Параметр класса попапа.\r\n   */\r\n  const popupClassName = `popup ${isOpen && \"popup_opened\"}`;\r\n\r\n  return (\r\n    <div className={popupClassName} onMouseDown={onMouseDown}>\r\n      <div className=\"popup__container\">\r\n        <button\r\n          className=\"button popup__button_type_close\"\r\n          onClick={onClose}\r\n          type=\"button\"\r\n          aria-label=\"Закрыть всплывающее окно\"\r\n        ></button>\r\n        <h2 className=\"popup__title\"> {title} </h2>\r\n        <form\r\n          className=\"popup__form\"\r\n          action=\"/\"\r\n          method=\"POST\"\r\n          onSubmit={onSubmit}\r\n          name={name}\r\n        >\r\n          {children}\r\n          <button\r\n            className={`button popup__button_type_submit ${\r\n              !isValid && \"popup__button_type_submit_disabled\"\r\n            }`}\r\n            type=\"submit\"\r\n            aria-label=\"Сохранить изменения\"\r\n          >\r\n            {submitButtonText}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopupWithForm;\r\n","import { IActionObject } from './authReducer';\r\n\r\n/**\r\n * Интерфейс для дефолтного состояния popupReducer.\r\n */\r\nexport interface IPopup {\r\n  editProfilePopupState: boolean,\r\n  editAvatarPopupState: boolean,\r\n  addPlacePopupState: boolean,\r\n  deletePlacePopupState: boolean,\r\n  imagePopupState: boolean,\r\n  infoTooltipState: boolean,\r\n}\r\n\r\n/**\r\n * Дефолтное состояние для popupReducer.\r\n */\r\nconst popupState: IPopup = {\r\n  editProfilePopupState: false,\r\n  editAvatarPopupState: false,\r\n  addPlacePopupState: false,\r\n  deletePlacePopupState: false,\r\n  imagePopupState: false,\r\n  infoTooltipState: false,\r\n};\r\n\r\n/**\r\n * Перечисление actions для popupReducer.\r\n * OPEN - action для открытия попапа.\r\n * CLOSE - action для закрытия попапа.\r\n */\r\nenum popupActions {\r\n  OPEN = \"OPEN\",\r\n  CLOSE = \"CLOSE\"\r\n}\r\n\r\n/**\r\n * Функция-редьюсер для состояний попапов.\r\n *\r\n * @param state - дефолтное состояние всех попапов (true - попап открыт, false - попап закрыт).\r\n * @param action - action, отправленный в popupReducer.\r\n */\r\nexport const popupReducer = (\r\n  state: IPopup = popupState,\r\n  action: IActionObject): IPopup => {\r\n  switch (action.type) {\r\n    case popupActions.OPEN:\r\n      return { ...state, [`${action.payload}State`]: true }\r\n    case popupActions.CLOSE:\r\n      return popupState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Экспорт actions данного редьюсера для dispatch в App.js\r\n */\r\nexport const openPopupAction = (payload: string): IActionObject => ({\r\n  type: popupActions.OPEN,\r\n  payload,\r\n});\r\nexport const closePopupAction = (): IActionObject => ({ type: popupActions.CLOSE });\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\nimport useFormAndValidation from \"../hooks/validationHook\";\r\nimport { inputValues } from \"../hooks/validationHook\";\r\nimport PopupWithForm from \"./PopupWithForm\";\r\n\r\n/**\r\n * Интерфейс для EditProfilePopup.\r\n * @prop onClose - функция закрытия попапа.\r\n * @prop onUpdateUser - обработчик данных формы при сабмите.\r\n * @prop onMouseDown - обработчик закрытия попапа по клику на оверлэй.\r\n */\r\ninterface EditProfilePopupProps {\r\n  onMouseDown: (evt: React.MouseEvent) => void;\r\n  onClose: () => void;\r\n  onUpdateUser: (values: inputValues) => void;\r\n}\r\n\r\n/**\r\n * EditProfilePopup - компонент попапа с формой добавления карточки в галерею.\r\n * Включает в себя компонент PopupWithForm.\r\n */\r\nconst EditProfilePopup: React.FunctionComponent<EditProfilePopupProps> = ({\r\n  onMouseDown,\r\n  onClose,\r\n  onUpdateUser,\r\n}) => {\r\n  /**\r\n   * Параметр состояния попапа: true - открыт, false - закрыт.\r\n   */\r\n  const { editProfilePopupState } = useSelector(\r\n    (state: RootState) => state.popup\r\n  );\r\n\r\n  /**\r\n   * Параметры для валидации формы.\r\n   */\r\n  const { values, handleChange, errors, isValid, setValues } =\r\n    useFormAndValidation();\r\n\r\n  /**\r\n   * Параметры текущего пользователя.\r\n   */\r\n  const { name, about } = useSelector((state: RootState) => state.user);\r\n\r\n  /**\r\n   * Параметр загрузки данных на сервер.\r\n   */\r\n  const isLoading = useSelector((state: RootState) => state.loading.isLoading);\r\n  /**\r\n   * Хук установки начального состояния формы при открытии попапа.\r\n   */\r\n  useEffect(() => {\r\n    if (editProfilePopupState) {\r\n      setValues({ name, about });\r\n    }\r\n  }, [editProfilePopupState]);\r\n\r\n  /**\r\n   * Обработчик сабмита формы.\r\n   */\r\n  const handleFormSubmit = (evt: React.ChangeEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    onUpdateUser(values);\r\n  };\r\n\r\n  return (\r\n    <PopupWithForm\r\n      title=\"Редактировать профиль\"\r\n      name=\"editProfileForm\"\r\n      submitButtonText={!isLoading ? \"Сохранить\" : \"Сохранение...\"}\r\n      isOpen={editProfilePopupState}\r\n      onMouseDown={onMouseDown}\r\n      onClose={onClose}\r\n      onSubmit={handleFormSubmit}\r\n      isValid={isValid}\r\n    >\r\n      <div className=\"popup__input-field\">\r\n        <input\r\n          type=\"text\"\r\n          className={`popup__input ${\r\n            errors?.name && \"popup__input_type_error\"\r\n          }`}\r\n          name=\"name\"\r\n          placeholder=\"Имя пользователя\"\r\n          value={values?.name || \"\"}\r\n          onChange={handleChange}\r\n          required\r\n          minLength={2}\r\n          maxLength={40}\r\n        />\r\n        {errors?.name && (\r\n          <span className=\"popup__error\" id=\"nameInputError\">\r\n            {errors.name}\r\n          </span>\r\n        )}\r\n      </div>\r\n      <div className=\"popup__input-field\">\r\n        <input\r\n          type=\"text\"\r\n          className={`popup__input ${\r\n            errors?.about && \"popup__input_type_error\"\r\n          }`}\r\n          name=\"about\"\r\n          placeholder=\"О себе\"\r\n          value={values?.about || \"\"}\r\n          onChange={handleChange}\r\n          required\r\n          minLength={2}\r\n          maxLength={200}\r\n        />\r\n        {errors?.about && (\r\n          <span className=\"popup__error\" id=\"aboutInputError\">\r\n            {errors.about}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </PopupWithForm>\r\n  );\r\n};\r\n\r\nexport default EditProfilePopup;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\nimport useFormAndValidation from \"../hooks/validationHook\";\r\nimport { inputValues } from \"../hooks/validationHook\";\r\nimport PopupWithForm from \"./PopupWithForm\";\r\n\r\n/**\r\n * Интерфейс для EditAvatarPopup.\r\n * @prop onClose - функция закрытия попапа.\r\n * @prop onUpdateAvatar - обработчик данных формы при сабмите.\r\n * @prop onMouseDown - обработчик закрытия попапа по клику на оверлэй.\r\n */\r\ninterface EditAvatarPopupProps {\r\n  onMouseDown: (evt: React.MouseEvent) => void;\r\n  onClose: () => void;\r\n  onUpdateAvatar: (values: inputValues) => void;\r\n}\r\n\r\n/**\r\n * EditAvatarPopup - компонент попапа с формой изменения аватара пользователя.\r\n * Включает в себя компонент PopupWithForm.\r\n */\r\nconst EditAvatarPopup: React.FunctionComponent<EditAvatarPopupProps> = ({\r\n  onMouseDown,\r\n  onClose,\r\n  onUpdateAvatar,\r\n}) => {\r\n  /**\r\n   * Параметр состояния попапа: true - открыт, false - закрыт.\r\n   */\r\n  const { editAvatarPopupState } = useSelector(\r\n    (state: RootState) => state.popup\r\n  );\r\n\r\n  /**\r\n   * Параметры для валидации формы.\r\n   */\r\n  const { values, handleChange, errors, isValid, setValues, resetForm } =\r\n    useFormAndValidation();\r\n\r\n  /**\r\n   * Параметр загрузки данных на сервер.\r\n   */\r\n  const isLoading = useSelector((state: RootState) => state.loading.isLoading);\r\n\r\n  /**\r\n   * Хук установки начального состояния формы при открытии попапа.\r\n   */\r\n  useEffect(() => {\r\n    if (editAvatarPopupState) {\r\n      resetForm();\r\n      setValues({ avatar: \"\" });\r\n    }\r\n  }, [editAvatarPopupState]);\r\n\r\n  /**\r\n   * Обработчик сабмита формы.\r\n   */\r\n  const handleFormSubmit = (evt: React.ChangeEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    onUpdateAvatar(values);\r\n  };\r\n\r\n  return (\r\n    <PopupWithForm\r\n      title=\"Обновить аватар\"\r\n      name=\"editAvatarForm\"\r\n      submitButtonText={!isLoading ? \"Сохранить\" : \"Сохранение...\"}\r\n      isOpen={editAvatarPopupState}\r\n      onMouseDown={onMouseDown}\r\n      onClose={onClose}\r\n      onSubmit={handleFormSubmit}\r\n      isValid={isValid}\r\n    >\r\n      <div className=\"popup__input-field\">\r\n        <input\r\n          type=\"url\"\r\n          className={`popup__input ${\r\n            errors?.avatar && \"popup__input_type_error\"\r\n          }`}\r\n          name=\"avatar\"\r\n          placeholder=\"Ссылка на новый аватар\"\r\n          value={values?.avatar || \"\"}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        {errors?.avatar && (\r\n          <span className=\"popup__error\" id=\"avatarLinkInputError\">\r\n            {errors.avatar}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </PopupWithForm>\r\n  );\r\n};\r\n\r\nexport default EditAvatarPopup;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\n\r\n/**\r\n * Интерфейс для ImagePopup.\r\n * @prop onClose - функция закрытия попапа.\r\n * @prop onMouseDown - обработчик закрытия попапа по клику на оверлэй.\r\n */\r\ninterface ImagePopupProps {\r\n  onClose: () => void;\r\n  onMouseDown: (evt: React.MouseEvent) => void;\r\n}\r\n\r\n/**\r\n * ImagePopup - компонент попапа с полным изображением карточки.\r\n *\r\n * @prop onClose - функция закрытия попапа.\r\n */\r\nconst ImagePopup: React.FunctionComponent<ImagePopupProps> = ({\r\n  onMouseDown,\r\n  onClose,\r\n}) => {\r\n  /**\r\n   * Параметр состояния попапа: true - открыт, false - закрыт.\r\n   */\r\n  const { imagePopupState } = useSelector((state: RootState) => state.popup);\r\n\r\n  /**\r\n   * Параметр состояния карточки.\r\n   */\r\n  const card = useSelector((state: RootState) => state.card);\r\n\r\n  return (\r\n    <div\r\n      className={`popup popup_type_full-image ${\r\n        card.name && card.link && imagePopupState && \"popup_opened\"\r\n      }`}\r\n      onMouseDown={onMouseDown}\r\n    >\r\n      <figure className=\"popup__container popup__container_type_full-image\">\r\n        <button\r\n          className=\"button popup__button_type_close\"\r\n          onClick={onClose}\r\n          type=\"button\"\r\n          aria-label=\"Закрыть всплывающее окно\"\r\n        ></button>\r\n        <img src={card.link} alt={card.name} className=\"popup__full-image\" />\r\n        <figcaption className=\"popup__full-image-caption\">\r\n          {card.name}\r\n        </figcaption>\r\n      </figure>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImagePopup;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\nimport useFormAndValidation from \"../hooks/validationHook\";\r\nimport { inputValues } from \"../hooks/validationHook\";\r\nimport PopupWithForm from \"./PopupWithForm\";\r\n\r\n/**\r\n * Интерфейс для AddPlacePopup.\r\n * @prop onMouseDown - обработчик закрытия попапа по клику на оверлэй.\r\n * @prop onClose - функция закрытия попапа.\r\n * @prop onAddPlace - обработчик данных формы при сабмите.\r\n */\r\ninterface AddPlacePopupProps {\r\n  onMouseDown: (evt: React.MouseEvent) => void;\r\n  onClose: () => void;\r\n  onAddPlace: (values: inputValues) => void;\r\n}\r\n\r\n/**\r\n * AddPlacePopup - компонент попапа с формой добавления карточки в галерею.\r\n * Включает в себя компонент PopupWithForm.\r\n */\r\nconst AddPlacePopup: React.FunctionComponent<AddPlacePopupProps> = ({\r\n  onMouseDown,\r\n  onClose,\r\n  onAddPlace,\r\n}) => {\r\n  /**\r\n   * Параметр состояния попапа: true - открыт, false - закрыт.\r\n   */\r\n  const { addPlacePopupState } = useSelector((state: RootState) => state.popup);\r\n\r\n  /**\r\n   * Параметр загрузки данных на сервер.\r\n   */\r\n  const isLoading = useSelector((state: RootState) => state.loading.isLoading);\r\n\r\n  /**\r\n   * Параметры для валидации формы.\r\n   */\r\n  const { values, handleChange, errors, isValid, setValues, resetForm } =\r\n    useFormAndValidation();\r\n\r\n  /**\r\n   * Хук установки начального состояния формы при открытии попапа.\r\n   */\r\n  useEffect(() => {\r\n    if (addPlacePopupState) {\r\n      resetForm();\r\n      setValues({ name: \"\", link: \"\" });\r\n    }\r\n  }, [addPlacePopupState]);\r\n\r\n  /**\r\n   * Обработчик сабмита формы.\r\n   */\r\n  const handleFormSubmit = (evt: React.ChangeEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    onAddPlace(values);\r\n  };\r\n\r\n  return (\r\n    <PopupWithForm\r\n      title=\"Новое место\"\r\n      name=\"addCardForm\"\r\n      submitButtonText={!isLoading ? \"Создать\" : \"Сохранение...\"}\r\n      isOpen={addPlacePopupState}\r\n      onMouseDown={onMouseDown}\r\n      onClose={onClose}\r\n      onSubmit={handleFormSubmit}\r\n      isValid={isValid}\r\n    >\r\n      <div className=\"popup__input-field\">\r\n        <input\r\n          type=\"text\"\r\n          className={`popup__input ${\r\n            errors?.name && \"popup__input_type_error\"\r\n          }`}\r\n          name=\"name\"\r\n          placeholder=\"Название\"\r\n          value={values?.name || \"\"}\r\n          onChange={handleChange}\r\n          required\r\n          minLength={2}\r\n          maxLength={30}\r\n        />\r\n        {errors?.name && (\r\n          <span className=\"popup__error\" id=\"cardTitleInputError\">\r\n            {errors?.name}\r\n          </span>\r\n        )}\r\n      </div>\r\n      <div className=\"popup__input-field\">\r\n        <input\r\n          type=\"url\"\r\n          className={`popup__input ${\r\n            errors?.link && \"popup__input_type_error\"\r\n          }`}\r\n          name=\"link\"\r\n          placeholder=\"Ссылка на картинку\"\r\n          value={values?.link || \"\"}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        {errors?.link && (\r\n          <span className=\"popup__error\" id=\"cardLinkInputError\">\r\n            {errors.link}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </PopupWithForm>\r\n  );\r\n};\r\n\r\nexport default AddPlacePopup;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\nimport PopupWithForm from \"./PopupWithForm\";\r\n\r\n/**\r\n * Интерфейс для DeletePlacePopup.\r\n * @prop onClose - функция закрытия попапа.\r\n * @prop onApproveDeletePlace - обработчик подтверждения удаления карточки.\r\n * @prop onMouseDown - обработчик закрытия попапа по клику на оверлэй.\r\n */\r\ninterface DeletePlacePopupProps {\r\n  onMouseDown: (evt: React.MouseEvent) => void;\r\n  onClose: () => void;\r\n  onApproveDeletePlace: () => void;\r\n}\r\n\r\n/**\r\n * DeletePlacePopup - компонент попапа с формой удаления карточки в галерею.\r\n * Включает в себя компонент PopupWithForm.\r\n */\r\nconst DeletePlacePopup: React.FunctionComponent<DeletePlacePopupProps> = ({\r\n  onMouseDown,\r\n  onClose,\r\n  onApproveDeletePlace,\r\n}) => {\r\n  /**\r\n   * Параметр состояния попапа: true - открыт, false - закрыт.\r\n   */\r\n  const { deletePlacePopupState } = useSelector(\r\n    (state: RootState) => state.popup\r\n  );\r\n\r\n  /**\r\n   * Обработчик сабмита формы.\r\n   */\r\n  const handleFormSubmit = (evt: React.ChangeEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    onApproveDeletePlace();\r\n  };\r\n\r\n  return (\r\n    <PopupWithForm\r\n      title=\"Вы уверены?\"\r\n      name=\"delete-card\"\r\n      submitButtonText=\"Да\"\r\n      isOpen={deletePlacePopupState}\r\n      onMouseDown={onMouseDown}\r\n      onClose={onClose}\r\n      onSubmit={handleFormSubmit}\r\n      isValid={true}\r\n      children={undefined}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DeletePlacePopup;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/**\r\n * Интерфейс для Register.\r\n * @prop onLogin - обработчик данных, вводимых пользователем в форму, при логине.\r\n */\r\n\r\ninterface RegisterProps {\r\n  onRegister: (password: string, email: string) => void;\r\n}\r\n\r\n/**\r\n * Интерфейс для данных формы логина пользователя.\r\n */\r\ninterface registerInputValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n/**\r\n * Register - компонент со страницей регистрации пользователя.\r\n *\r\n * @prop onRegister - обработчик данных, вводимых пользователем в форму, при регистрации.\r\n */\r\nconst Register: React.FunctionComponent<RegisterProps> = ({ onRegister }) => {\r\n  /**\r\n   * Параметр состояния инпутов формы.\r\n   */\r\n  const [registerInputValues, setRegisterInputValues] =\r\n    useState<registerInputValues>({\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n\r\n  /**\r\n   * Обработчик ввода данных в инпуты формы.\r\n   */\r\n  const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = evt.target;\r\n    setRegisterInputValues({\r\n      ...registerInputValues,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Обработчик сабмита формы.\r\n   */\r\n  const handleFormSubmit = (evt: React.ChangeEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    const { password, email } = registerInputValues;\r\n    onRegister(password, email);\r\n  };\r\n\r\n  return (\r\n    <section className=\"sign\">\r\n      <h1 className=\"sign__title\">Регистрация</h1>\r\n      <form className=\"sign__form\" onSubmit={handleFormSubmit}>\r\n        <input\r\n          className=\"sign__input\"\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          value={registerInputValues.email}\r\n          onChange={handleInputChange}\r\n        />\r\n        <input\r\n          className=\"sign__input\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          value={registerInputValues.password}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button\r\n          className=\"button sign__button\"\r\n          type=\"submit\"\r\n          aria-label=\"Сохранить изменения\"\r\n        >\r\n          Зарегистрироваться\r\n        </button>\r\n      </form>\r\n      <p className=\"sign__subtitle\">\r\n        Уже зарегистрированы?{\" \"}\r\n        <Link to=\"sign-in\" className=\"sign__link\">\r\n          Войти\r\n        </Link>\r\n      </p>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { useState } from \"react\";\r\n\r\n/**\r\n * Интерфейс для Login.\r\n * @prop onLogin - обработчик данных, вводимых пользователем в форму, при логине.\r\n */\r\n\r\ninterface LoginProps {\r\n  onLogin: (password: string, email: string) => void;\r\n}\r\n\r\n/**\r\n * Интерфейс для данных формы логина пользователя.\r\n */\r\ninterface loginInputValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n/**\r\n * Login - компонент со страницей логина пользователя.\r\n */\r\nconst Login: React.FunctionComponent<LoginProps> = ({ onLogin }) => {\r\n  /**\r\n   * Параметр состояния инпутов формы.\r\n   */\r\n  const [loginInputValues, setLoginInputValues] = useState<loginInputValues>({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  /**\r\n   * Обработчик ввода данных в инпуты формы.\r\n   */\r\n  const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = evt.target;\r\n    setLoginInputValues({\r\n      ...loginInputValues,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Обработчик сабмита формы.\r\n   */\r\n  const handleFormSubmit = (evt: React.ChangeEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    const { password, email } = loginInputValues;\r\n    onLogin(password, email);\r\n  };\r\n\r\n  return (\r\n    <section className=\"sign\">\r\n      <h1 className=\"sign__title\">Вход</h1>\r\n      <form className=\"sign__form\" onSubmit={handleFormSubmit}>\r\n        <input\r\n          className=\"sign__input\"\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          value={loginInputValues.email}\r\n          onChange={handleInputChange}\r\n        />\r\n        <input\r\n          className=\"sign__input\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          value={loginInputValues.password}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button\r\n          className=\"button sign__button\"\r\n          type=\"submit\"\r\n          aria-label=\"Сохранить изменения\"\r\n        >\r\n          Войти\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\n\r\n/**\r\n * Интерфейс для ProtectedRoute.\r\n * @prop Component - компонент, на который происходит перенаправление при логине пользователя.\r\n * @prop props - все остальные пропсы этого компонента.\r\n */\r\n\r\ninterface ProtectedRouteProps {\r\n  component: React.ComponentType<any>;\r\n  [props: string]: any;\r\n}\r\n\r\n/**\r\n * ProtectedRoute - компонент с защищенным роутом.\r\n * Определяет залогинен ли пользователь, перенаправляя на нужный компонент или адрес.\r\n *\r\n * @prop Component - компонент, на который происходит перенаправление при логине пользователя.\r\n * @prop props - все остальные пропсы этого компонента.\r\n */\r\nconst ProtectedRoute: React.FunctionComponent<ProtectedRouteProps> = ({\r\n  component: Component,\r\n  ...props\r\n}) => {\r\n  /**\r\n   * Параметр статуса логина пользователя.\r\n   */\r\n  const { isLoggedIn } = useSelector((state: RootState) => state.auth);\r\n\r\n  return (\r\n    <Route>\r\n      {isLoggedIn ? <Component {...props} /> : <Redirect to=\"/sign-in\" />}\r\n    </Route>\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/store\";\r\n\r\n/**\r\n * Интерфейс для InfoTooltip.\r\n * @prop onClose - функция закрытия попапа.\r\n * @prop onMouseDown - обработчик закрытия попапа по клику на оверлэй.\r\n */\r\ninterface InfoTooltipProps {\r\n  onMouseDown: (evt: React.MouseEvent) => void;\r\n  onClose: () => void;\r\n}\r\n\r\n/**\r\n * InfoTooltip - компонент попапа с формой добавления карточки в галерею.\r\n */\r\nconst InfoTooltip: React.FunctionComponent<InfoTooltipProps> = ({\r\n  onMouseDown,\r\n  onClose,\r\n}) => {\r\n  /**\r\n   * Параметр состояния попапа: true - открыт, false - закрыт.\r\n   */\r\n  const { infoTooltipState } = useSelector((state: RootState) => state.popup);\r\n\r\n  /**\r\n   * Параметр состояния регистрации пользователя.\r\n   */\r\n  const { isRegistered } = useSelector((state: RootState) => state.auth);\r\n\r\n  /**\r\n   * Параметр класса попапа.\r\n   */\r\n  const popupClassName = `popup ${infoTooltipState && \"popup_opened\"}`;\r\n\r\n  const title = isRegistered\r\n    ? \"Вы успешно зарегистрировались!\"\r\n    : \"Что-то пошло не так! Попробуйте ещё раз.\";\r\n\r\n  const signClassName = `popup__info-sign ${\r\n    isRegistered\r\n      ? \"popup__info-sign_type_success\"\r\n      : \"popup__info-sign_type_fail\"\r\n  }`;\r\n\r\n  return (\r\n    <div className={popupClassName} onMouseDown={onMouseDown}>\r\n      <div className=\"popup__container\">\r\n        <button\r\n          className=\"button popup__button_type_close\"\r\n          onClick={onClose}\r\n          type=\"button\"\r\n          aria-label=\"Закрыть всплывающее окно\"\r\n        ></button>\r\n        <div className={signClassName}></div>\r\n        <h2 className=\"popup__title popup__info-title\">{title}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoTooltip;\r\n","/**\r\n * Интерфейс для дефолтного состояния authReducer.\r\n * @prop isRegistered - состояние регистрации пользователя.\r\n * @prop isLoggedIn - состояние логина пользователя.\r\n * @prop userEmail - email, введённый пользователем.\r\n */\r\nexport interface IAuth {\r\n  isRegistered: boolean;\r\n  isLoggedIn: boolean;\r\n  userEmail: string;\r\n}\r\n\r\n/**\r\n * Интерфейс для дефолтного состояния Action.\r\n */\r\nexport interface IActionObject {\r\n  type: string;\r\n  payload?: any;\r\n}\r\n\r\n/**\r\n * Дефолтное состояние для authReducer.\r\n */\r\nconst authState: IAuth = {\r\n  isRegistered: false,\r\n  isLoggedIn: false,\r\n  userEmail: \"\",\r\n};\r\n\r\n/**\r\n * Перечисление actions для authReducer.\r\n * LOG_IN - action логина пользователя.\r\n * LOG_OUT - action логаута пользователя.\r\n * REGISTERED - action для удачной регистрации пользователя.\r\n * UNREGISTERED - action для неудачной регистрации пользователя.\r\n */\r\nenum authActions {\r\n  LOG_IN = \"LOG_IN\",\r\n  LOG_OUT = \"LOG_OUT\",\r\n  REGISTERED = \"REGISTERED\",\r\n  UNREGISTERED = \"UNREGISTERED\",\r\n}\r\n\r\n/**\r\n * Редьюсер для авторизации пользователя.\r\n *\r\n * @param state - дефолтное состояние параметров isRegistered, isLoggedIn, userEmail.\r\n * @param action - action, отправленный в authReducer.\r\n */\r\nexport const authReducer = (\r\n  state: IAuth = authState,\r\n  action: IActionObject\r\n): IAuth => {\r\n  switch (action.type) {\r\n    case authActions.LOG_IN:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        userEmail: action.payload,\r\n      };\r\n    case authActions.LOG_OUT:\r\n      return { ...state, isLoggedIn: false, userEmail: \"\" };\r\n    case authActions.REGISTERED:\r\n      return { ...state, isLoggedIn: false, isRegistered: true };\r\n    case authActions.UNREGISTERED:\r\n      return { ...state, isLoggedIn: false, isRegistered: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Экспорт actions данного редьюсера для dispatch в App.js.\r\n */\r\nexport const loginAction = (payload: any): IActionObject => ({\r\n  type: authActions.LOG_IN,\r\n  payload: payload,\r\n});\r\nexport const logoutAction = (): IActionObject => ({\r\n  type: authActions.LOG_OUT,\r\n});\r\nexport const registerAction = (): IActionObject => ({\r\n  type: authActions.REGISTERED,\r\n});\r\nexport const unregisterAction = (): IActionObject => ({\r\n  type: authActions.UNREGISTERED,\r\n});\r\n","import { ICard } from \"./cardReducer\";\r\nimport { IActionObject } from \"./authReducer\";\r\n\r\n/**\r\n * Дефолтное состояние для galleryReducer.\r\n * @prop  ICard - тип карточки (объект с данными). Галерея состоит из массива с карточками.\r\n */\r\nconst galleryState: ICard[] = [];\r\n\r\n/**\r\n * Перечисление actions для galleryReducer.\r\n * GET_CARDS - action для получения всех карточек с сервера.\r\n * ADD_CARD - action для добавления карточки в галерею.\r\n * LIKE_CARD - action для установки лайка на карточку.\r\n * DELETE_CARD - action для удаления карточки из галереи.\r\n */\r\nenum galleryActions {\r\n  GET_CARDS = \"GET_CARDS\",\r\n  ADD_CARD = \"ADD_CARD\",\r\n  LIKE_CARD = \"LIKE_CARD\",\r\n  DELETE_CARD = \"DELETE_CARD\",\r\n}\r\n\r\n/**\r\n * Редьюсер для взаимодействия с галереей: загрузка всех карточек, добавление новой карточки,\r\n * лайк карточки, удаление карточки.\r\n *\r\n * @param state - дефолтное состояние параметров galleryState.\r\n * @param action - action, отправленный в galleryReducer.\r\n */\r\nexport const galleryReducer = (\r\n  state: ICard[] = galleryState,\r\n  action: IActionObject\r\n): ICard[] => {\r\n  switch (action.type) {\r\n    case galleryActions.GET_CARDS:\r\n      return [...galleryState, ...action.payload];\r\n    case galleryActions.ADD_CARD:\r\n      return [action.payload, ...state];\r\n    case galleryActions.LIKE_CARD:\r\n      return [\r\n        ...state.map((card) =>\r\n          card._id === action.payload.cardId ? action.payload.newCard : card\r\n        ),\r\n      ];\r\n    case galleryActions.DELETE_CARD: {\r\n      return [...state.filter((card) => card._id !== action.payload)];\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Экспорт actions данного редьюсера для dispatch в App.js.\r\n */\r\nexport const getCardsAction = (payload: ICard[]): IActionObject => ({\r\n  type: galleryActions.GET_CARDS,\r\n  payload: payload,\r\n});\r\n\r\nexport const addCardAction = (payload: ICard): IActionObject => ({\r\n  type: galleryActions.ADD_CARD,\r\n  payload: payload,\r\n});\r\n\r\nexport const likeCardAction = (payload: {\r\n  cardId?: string;\r\n  newCard?: ICard;\r\n}): IActionObject => ({\r\n  type: galleryActions.LIKE_CARD,\r\n  payload: payload,\r\n});\r\n\r\nexport const deleteCardAction = (payload: any): IActionObject => ({\r\n  type: galleryActions.DELETE_CARD,\r\n  payload: payload,\r\n});\r\n","import { IActionObject } from './authReducer';\r\n\r\n/**\r\n * Интерфейс для дефолтного состояния userReducer.\r\n */\r\nexport interface IUser {\r\n  name: string,\r\n  about: string,\r\n  avatar: string,\r\n  cohort: string,\r\n  _id: string,\r\n}\r\n\r\n/**\r\n * Дефолтное состояние для userReducer.\r\n */\r\nexport const userState: IUser = {\r\n  name: \"\",\r\n  about: \"\",\r\n  avatar: \"\",\r\n  cohort: \"\",\r\n  _id: \"\",\r\n};\r\nconst GET_USER: string = \"GET_USER\";\r\nconst UPDATE_PROFILE: string = \"UPDATE_PROFILE\";\r\nconst UPDATE_AVATAR: string = \"UPDATE_AVATAR\";\r\n\r\n/**\r\n * Функция-редьюсер для взаимодействия с данными текущего пользователя.\r\n *\r\n * @param state - дефолтное состояние данных текущего пользователя.\r\n * @param action - action, отправленный в userReducer.\r\n */\r\nexport const userReducer = (\r\n  state: IUser = userState,\r\n  action: IActionObject): IUser => {\r\n  switch (action.type) {\r\n    case GET_USER: {\r\n      return {\r\n        ...state,\r\n        name: action.payload.name,\r\n        about: action.payload.about,\r\n        avatar: action.payload.avatar,\r\n        cohort: action.payload.cohort,\r\n        _id: action.payload._id,\r\n      };\r\n    }\r\n    case UPDATE_PROFILE:\r\n      return {\r\n        ...state,\r\n        name: action.payload.name,\r\n        about: action.payload.about,\r\n      };\r\n    case UPDATE_AVATAR:\r\n      return {\r\n        ...state,\r\n        avatar: action.payload.avatar,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Экспорт actions данного редьюсера для dispatch в App.js\r\n */\r\nexport const getUserAction = (payload: IUser): IActionObject => ({\r\n  type: GET_USER,\r\n  payload: payload,\r\n});\r\n\r\nexport const updateProfileAction = (payload: {\r\n  name: string,\r\n  about: string,\r\n}): IActionObject => ({\r\n  type: UPDATE_PROFILE,\r\n  payload: payload,\r\n});\r\n\r\nexport const updateAvatarAction = (payload: {\r\n  avatar: string,\r\n}): IActionObject => ({\r\n  type: UPDATE_AVATAR,\r\n  payload: payload,\r\n});\r\n","import { IUser, userState } from \"./userReducer\";\r\nimport { IActionObject } from \"./authReducer\";\r\n\r\n/**\r\n * Интерфейс для дефолтного состояния cardReducer.\r\n * @prop _id - id карточки.\r\n * @prop name - название карточки.\r\n * @prop link - ссылка на изображение карточки.\r\n * @prop createdAt - время создания карточки.\r\n * @prop likes - массив пользователей, лайкнувших карточку.\r\n * @prop owner - объект с данными пользователя, создавшего карточку.\r\n */\r\nexport interface ICard {\r\n  _id: string;\r\n  name: string;\r\n  link: string;\r\n  createdAt: string;\r\n  likes: IUser[];\r\n  owner: IUser;\r\n}\r\n\r\n/**\r\n * Дефолтное состояние для cardReducer.\r\n */\r\nconst cardState: ICard = {\r\n  _id: \"\",\r\n  name: \"\",\r\n  link: \"\",\r\n  createdAt: \"\",\r\n  likes: [],\r\n  owner: userState,\r\n};\r\n\r\n/**\r\n * Перечисление actions для cardReducer.\r\n * OPENED_CARD - action для данных карточки, полное изображение которой открывается в попапе.\r\n * DELETED_CARD - action для данных карточки, удаление которой произойдет при одобрении в попапе.\r\n */\r\nenum cardActions {\r\n  OPENED_CARD = \"OPENED_CARD\",\r\n  DELETED_CARD = \"DELETED_CARD\",\r\n}\r\n\r\n/**\r\n * Редьюсер для получения данных карточки для открытие полного изображения или удаление карточки.\r\n * @param state - дефолтное состояние параметров cardState.\r\n * @param action - action, отправленный в cardReducer.\r\n */\r\nexport const cardReducer = (\r\n  state: ICard = cardState,\r\n  action: IActionObject\r\n): ICard => {\r\n  switch (action.type) {\r\n    case cardActions.OPENED_CARD:\r\n      return { ...cardState, ...action.payload };\r\n    case cardActions.DELETED_CARD:\r\n      return { ...cardState, _id: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Экспорт actions данного редьюсера для dispatch в App.js.\r\n */\r\nexport const openedCardAction = (payload: any): IActionObject => ({\r\n  type: cardActions.OPENED_CARD,\r\n  payload: payload,\r\n});\r\nexport const deletedCardAction = (payload: any): IActionObject => ({\r\n  type: cardActions.DELETED_CARD,\r\n  payload: payload,\r\n});\r\n","import { IActionObject } from './authReducer';\r\n\r\n/**\r\n * Интерфейс для дефолтного состояния loadingReducer.\r\n */\r\nexport interface ILoading {\r\n  isLoading: boolean\r\n}\r\n\r\n/**\r\n * Дефолтное состояние для loadingReducer.\r\n */\r\nconst loadingState: ILoading = {\r\n  isLoading: false,\r\n};\r\n\r\n/**\r\n * Перечисление actions для loadingReducer.\r\n * LOADING - action для статуса загрузки информации на сервер.\r\n * LOADED - action для статуса окончания загрузки информации на сервер.\r\n */\r\nenum loadingActions {\r\n  LOADING = \"LOADING\",\r\n  LOADED = \"LOADED\"\r\n}\r\n\r\n/**\r\n * Редьюсер для статуса загрузки данных на сервер.\r\n *\r\n * @param state - дефолтное состояние параметров loadingState.\r\n * @param action - action, отправленный в loadingReducer.\r\n */\r\nexport const loadingReducer = (\r\n  state: ILoading = loadingState,\r\n  action: IActionObject,\r\n): ILoading => {\r\n  switch (action.type) {\r\n    case loadingActions.LOADING:\r\n      return { ...state, isLoading: true };\r\n    case loadingActions.LOADED:\r\n      return { ...state, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Экспорт actions данного редьюсера для dispatch в App.js.\r\n */\r\nexport const loadingDataAction = (): IActionObject => ({ type: loadingActions.LOADING });\r\nexport const loadedDataAction = (): IActionObject => ({ type: loadingActions.LOADED });\r\n","import React, { useEffect } from \"react\";\r\nimport { Switch, Route, useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as api from \"../utils/api\";\r\nimport * as apiAuth from \"../utils/apiAuth\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\nimport Footer from \"./Footer\";\r\nimport EditProfilePopup from \"./EditProfilePopup\";\r\nimport EditAvatarPopup from \"./EditAvatarPopup\";\r\nimport ImagePopup from \"./ImagePopup\";\r\nimport AddPlacePopup from \"./AddPlacePopup\";\r\nimport DeletePlacePopup from \"./DeletePlacePopup\";\r\nimport Register from \"./Register\";\r\nimport Login from \"./Login\";\r\nimport ProtectedRoute from \"./ProtectedRoute\";\r\nimport InfoTooltip from \"./InfoTooltip\";\r\nimport { RootState } from \"../store/store\";\r\nimport { ICard } from \"../store/reducers/cardReducer\";\r\nimport { IUser } from \"../store/reducers/userReducer\";\r\nimport { inputValues } from \"../hooks/validationHook\";\r\nimport {\r\n  openPopupAction,\r\n  closePopupAction,\r\n} from \"../store/reducers/popupReducer\";\r\nimport {\r\n  loginAction,\r\n  logoutAction,\r\n  registerAction,\r\n  unregisterAction,\r\n} from \"../store/reducers/authReducer\";\r\nimport {\r\n  getUserAction,\r\n  updateProfileAction,\r\n  updateAvatarAction,\r\n} from \"../store/reducers/userReducer\";\r\nimport {\r\n  getCardsAction,\r\n  addCardAction,\r\n  likeCardAction,\r\n  deleteCardAction,\r\n} from \"../store/reducers/galleryReducer\";\r\nimport {\r\n  openedCardAction,\r\n  deletedCardAction,\r\n} from \"../store/reducers/cardReducer\";\r\nimport {\r\n  loadingDataAction,\r\n  loadedDataAction,\r\n} from \"../store/reducers/loadingReducer\";\r\n\r\n/**\r\n * App - главный компонент приложения.\r\n * Включает в себя все компоненты и логику работу приложения.\r\n */\r\nconst App: React.FunctionComponent = () => {\r\n  /**\r\n   * Хук для подключения dispatch.\r\n   */\r\n  const dispatch = useDispatch();\r\n\r\n  /**\r\n   * Хук для подключения history.\r\n   */\r\n  const history = useHistory();\r\n\r\n  /**\r\n   * Параметр статуса логина пользователя\r\n   */\r\n  const { isLoggedIn } = useSelector((state: RootState) => state.auth);\r\n\r\n  /**\r\n   * Параметр с данными текущего пользователя.\r\n   */\r\n  const currentUser = useSelector((state: RootState) => state.user);\r\n\r\n  /**\r\n   * Параметр карточки: opened - для полного изображения карточки, deleted - для удаляемой карточки.\r\n   */\r\n  const card = useSelector((state: RootState) => state.card);\r\n\r\n  /**\r\n   * Функция открытия попапа. Дополнительно устанавливается слушатель нажатия на Esc.\r\n   *\r\n   * @param popupType - тип попапа\r\n   */\r\n\r\n  const onOpenPopup = (popupType: string): void => {\r\n    dispatch(openPopupAction(popupType));\r\n    document.addEventListener(\"keydown\", handleEscClick);\r\n  };\r\n\r\n  /**\r\n   * Функция закрытия попапа.\r\n   */\r\n  const closePopup = () => {\r\n    dispatch(closePopupAction());\r\n    document.removeEventListener(\"keydown\", handleEscClick);\r\n  };\r\n\r\n  /**\r\n   * Обработчик нажатия на оверлэй.\r\n   */\r\n  const handleOverlayClick = (evt: React.MouseEvent) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      closePopup();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработчик нажатия на Esc.\r\n   */\r\n  const handleEscClick = (evt: KeyboardEvent) => {\r\n    if (evt.key === \"Escape\") {\r\n      closePopup();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработчик регистрации пользователя:\r\n   * отправляет запрос к api с параметрами password, email.\r\n   *\r\n   * @param password - пароль, вводимый пользователем\r\n   * @param email - email, вводимый пользователя\r\n   */\r\n  const handleRegister = (password: string, email: string): void => {\r\n    apiAuth\r\n      .register(password, email)\r\n      .then(() => {\r\n        dispatch(registerAction());\r\n        onOpenPopup(\"infoTooltip\");\r\n      })\r\n      .catch((error) => {\r\n        dispatch(unregisterAction());\r\n        onOpenPopup(\"infoTooltip\");\r\n        handleError(error);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Хук для проверки наличия токена пользователя в LocalStorage при открытии сайта.\r\n   */\r\n  useEffect((): void => {\r\n    checkUserToken();\r\n  }, []);\r\n\r\n  /**\r\n   * Проверка наличия токена в localStorage.\r\n   * При его наличии, устанавливаем, что пользователь залогинен, и перенаправляем на \"/\".\r\n   *\r\n   */\r\n  const checkUserToken = (): void => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      apiAuth\r\n        .isTokenValid(token)\r\n        .then((user) => {\r\n          const { data } = user;\r\n          const { email } = data;\r\n          dispatch(loginAction(email));\r\n          history.push(\"/\");\r\n        })\r\n        .catch(handleError);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработчик ошибок, возникающих при запросах.\r\n   */\r\n  const handleError = (error: string): void => {\r\n    console.log(error);\r\n  };\r\n\r\n  /**\r\n   * Обработчик статуса логина пользователя:\r\n   * отправляет запрос к api с параметрами password, email.\r\n   *\r\n   * @param password - пароль, вводимый пользователем\r\n   * @param email - email, вводимый пользователя\r\n   */\r\n  const handleLogin = (password: string, email: string): void => {\r\n    apiAuth\r\n      .authorize(password, email)\r\n      .then((data) => {\r\n        if (data) {\r\n          const { token } = data;\r\n          localStorage.setItem(\"token\", token);\r\n          checkUserToken();\r\n        }\r\n      })\r\n      .catch(handleError);\r\n  };\r\n\r\n  /**\r\n   * Обработчик разлогинивания пользователя из аккаунта:\r\n   * удаляем токен из LocalStorage.\r\n   */\r\n  const handleLogout = (): void => {\r\n    localStorage.removeItem(\"token\");\r\n    dispatch(logoutAction());\r\n    history.push(\"/sign-in\");\r\n  };\r\n\r\n  /**\r\n   * Хук с запросом к api всех карточек с сервера, обновления стейта с карточками.\r\n   */\r\n  useEffect((): void => {\r\n    api\r\n      .getCards()\r\n      .then((cardsData) => dispatch(getCardsAction(cardsData)))\r\n      .catch((err) => console.log(`Ошибка: ${err}`));\r\n  }, []);\r\n\r\n  /**\r\n   * Обработчик клика на кнопку лайка карточки.\r\n   *\r\n   * @param likes - массив с пользователями, лайкнувшими карточку.\r\n   * @param cardId - id карточки, выбранной для установки лайка.\r\n   */\r\n  const handleCardLike = (likes: IUser[], cardId: string): void => {\r\n    const isLiked = likes.some((user) => user._id === currentUser._id);\r\n    api\r\n      .changeLikeCardStatus(cardId, isLiked)\r\n      .then((newCard) => {\r\n        dispatch(likeCardAction({ cardId: cardId, newCard: newCard }));\r\n      })\r\n      .catch((err) => console.log(`Ошибка: ${err}`));\r\n  };\r\n\r\n  /**\r\n   * Функция подтверждения удаления карточки.\r\n   */\r\n  const onApproveDeletePlace = (): void => {\r\n    if (card._id) {\r\n      api\r\n        .deleteCard(card._id)\r\n        .then(() => dispatch(deleteCardAction(card._id)))\r\n        .then(() => closePopup())\r\n        .catch((err) => console.log(`Ошибка: ${err}`));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика по кнопке удаления карточки.\r\n   *\r\n   * @param cardId - id карточки, выбранной для удаления.\r\n   */\r\n  const handleCardDeleteButtonClick = (cardId: string): void => {\r\n    onOpenPopup(\"deletePlacePopup\");\r\n    dispatch(deletedCardAction(cardId));\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика на сабмит формы добавления новой карточки.\r\n   *\r\n   * @param inputValuesData - данные новой карточки для добавления в галерею, введенные в форму пользователем..\r\n   */\r\n  const handleAddPlaceSubmit = (inputValuesData: inputValues): void => {\r\n    dispatch(loadingDataAction());\r\n    api\r\n      .addCard(inputValuesData)\r\n      .then((newCard) => dispatch(addCardAction(newCard)))\r\n      .then(() => closePopup())\r\n      .catch((err) => console.log(`Ошибка: ${err}`))\r\n      .finally(() => dispatch(loadedDataAction()));\r\n  };\r\n\r\n  /**\r\n   * Хук с запросом к api данных текущего пользователя.\r\n   */\r\n  useEffect((): void => {\r\n    api\r\n      .getUserData()\r\n      .then((user) => dispatch(getUserAction(user)))\r\n      .catch((err) => console.log(`Ошибка: ${err}`));\r\n  }, []);\r\n\r\n  /**\r\n   * Обработчик клика на кнопку удаления карточки.\r\n   *\r\n   * @param inputValuesData - новые данные профиля, введенные в форму пользователем.\r\n   */\r\n  const handleUpdateUser = (inputValuesData: inputValues): void => {\r\n    dispatch(loadingDataAction());\r\n    api\r\n      .updateUserData(inputValuesData)\r\n      .then((data) => dispatch(updateProfileAction(data)))\r\n      .then(() => closePopup())\r\n      .catch((err) => console.log(`Ошибка: ${err}`))\r\n      .finally(() => dispatch(loadedDataAction()));\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика на кнопку удаления карточки.\r\n   *\r\n   * @param inputValuesData - новые данные аватара (ссылка на изображение), введенные в форму пользователем.\r\n   */\r\n  const handleUpdateAvatar = (avatarValue: inputValues): void => {\r\n    dispatch(loadingDataAction());\r\n    api\r\n      .updateAvatar(avatarValue)\r\n      .then((data) => dispatch(updateAvatarAction(data)))\r\n      .then(() => closePopup())\r\n      .catch((err) => console.log(`Ошибка: ${err}`))\r\n      .finally(() => dispatch(loadedDataAction()));\r\n  };\r\n\r\n  /**\r\n   * Обработчик клика на изображение карточки.\r\n   * По клику открывается попап с полным изображением.\r\n   *\r\n   * @param card - объект с данными карточки (название name, ссылка link)\r\n   */\r\n  const handleCardClick = (card: ICard) => {\r\n    dispatch(openedCardAction(card));\r\n    onOpenPopup(\"imagePopup\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header onLogout={handleLogout} />\r\n      <Switch>\r\n        <Route exact path=\"/sign-in\">\r\n          <Login onLogin={handleLogin} />\r\n        </Route>\r\n        <Route exact path=\"/sign-up\">\r\n          <Register onRegister={handleRegister} />\r\n        </Route>\r\n        <ProtectedRoute\r\n          component={Main}\r\n          onOpenPopup={onOpenPopup}\r\n          onImageCard={handleCardClick}\r\n          onCardLike={handleCardLike}\r\n          onCardDelete={handleCardDeleteButtonClick}\r\n        />\r\n        {isLoggedIn && <Footer />}\r\n      </Switch>\r\n      <EditProfilePopup\r\n        onMouseDown={handleOverlayClick}\r\n        onClose={closePopup}\r\n        onUpdateUser={handleUpdateUser}\r\n      />\r\n      <EditAvatarPopup\r\n        onMouseDown={handleOverlayClick}\r\n        onClose={closePopup}\r\n        onUpdateAvatar={handleUpdateAvatar}\r\n      />\r\n      <AddPlacePopup\r\n        onMouseDown={handleOverlayClick}\r\n        onClose={closePopup}\r\n        onAddPlace={handleAddPlaceSubmit}\r\n      />\r\n      <DeletePlacePopup\r\n        onMouseDown={handleOverlayClick}\r\n        onClose={closePopup}\r\n        onApproveDeletePlace={onApproveDeletePlace}\r\n      />\r\n      <ImagePopup onMouseDown={handleOverlayClick} onClose={closePopup} />\r\n      <InfoTooltip onMouseDown={handleOverlayClick} onClose={closePopup} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { popupReducer } from \"./reducers/popupReducer\";\r\nimport { authReducer } from \"./reducers/authReducer\";\r\nimport { userReducer } from \"./reducers/userReducer\";\r\nimport { galleryReducer } from \"./reducers/galleryReducer\";\r\nimport { cardReducer } from \"./reducers/cardReducer\";\r\nimport { loadingReducer } from \"./reducers/loadingReducer\";\r\n\r\n/**\r\n * Корневой редьюсер, выключающий в себя все редьюсеры приложения.\r\n */\r\nconst rootReducer = combineReducers({\r\n  popup: popupReducer,\r\n  auth: authReducer,\r\n  user: userReducer,\r\n  cards: galleryReducer,\r\n  card: cardReducer,\r\n  loading: loadingReducer,\r\n});\r\n\r\n/**\r\n * Type корневого редьюсера.\r\n */\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n/**\r\n * Store данного приложения.\r\n */\r\nexport const store = createStore(rootReducer);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { store } from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter basename=\"/\">\r\n        <App />\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}